// Generated from ShExDoc.g4 by ANTLR 4.5.3
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ShExDocListener = require('./ShExDocListener').ShExDocListener;
var grammarFileName = "ShExDoc.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003J\u0387\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0003\u0002\u0007",
    "\u0002\u009c\n\u0002\f\u0002\u000e\u0002\u009f\u000b\u0002\u0003\u0002",
    "\u0003\u0002\u0005\u0002\u00a3\n\u0002\u0003\u0002\u0007\u0002\u00a6",
    "\n\u0002\f\u0002\u000e\u0002\u00a9\u000b\u0002\u0005\u0002\u00ab\n\u0002",
    "\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u00b3\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0005",
    "\u0007\u00c4\n\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t",
    "\u0006\t\u00cc\n\t\r\t\u000e\t\u00cd\u0003\t\u0003\t\u0003\n\u0003\n",
    "\u0005\n\u00d4\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u00d9",
    "\n\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003\r\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u00e6\n\u000e",
    "\f\u000e\u000e\u000e\u00e9\u000b\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u00f0\n\u000f\f\u000f\u000e",
    "\u000f\u00f3\u000b\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0007\u0010\u00fa\n\u0010\f\u0010\u000e\u0010\u00fd\u000b",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0007",
    "\u0011\u0104\n\u0011\f\u0011\u000e\u0011\u0107\u000b\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0012\u0005\u0012\u010c\n\u0012\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0113\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u011c\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0127\n\u0013\u0003\u0014\u0003\u0014\u0005\u0014",
    "\u012b\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0134\n\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u013f\n\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u0147",
    "\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0005\u0016\u014f\n\u0016\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005",
    "\u0017\u0159\n\u0017\u0003\u0018\u0003\u0018\u0007\u0018\u015d\n\u0018",
    "\f\u0018\u000e\u0018\u0160\u000b\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0007\u0018\u0165\n\u0018\f\u0018\u000e\u0018\u0168\u000b\u0018",
    "\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0007\u0018\u016e\n",
    "\u0018\f\u0018\u000e\u0018\u0171\u000b\u0018\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0007\u0018\u0177\n\u0018\f\u0018\u000e\u0018",
    "\u017a\u000b\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0006\u0018\u017f",
    "\n\u0018\r\u0018\u000e\u0018\u0180\u0003\u0018\u0003\u0018\u0005\u0018",
    "\u0185\n\u0018\u0003\u0019\u0003\u0019\u0007\u0019\u0189\n\u0019\f\u0019",
    "\u000e\u0019\u018c\u000b\u0019\u0003\u0019\u0007\u0019\u018f\n\u0019",
    "\f\u0019\u000e\u0019\u0192\u000b\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0007\u001a\u0198\n\u001a\f\u001a\u000e\u001a\u019b",
    "\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0006\u001a\u01a0\n",
    "\u001a\r\u001a\u000e\u001a\u01a1\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u01a6\n\u001a\u0003\u001b\u0003\u001b\u0007\u001b\u01aa\n\u001b\f\u001b",
    "\u000e\u001b\u01ad\u000b\u001b\u0003\u001b\u0007\u001b\u01b0\n\u001b",
    "\f\u001b\u000e\u001b\u01b3\u000b\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005",
    "\u001c\u01bd\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d",
    "\u0003\u001d\u0003\u001d\u0005\u001d\u01c5\n\u001d\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u01cd",
    "\n\u001e\u0003\u001e\u0005\u001e\u01d0\n\u001e\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u01d8\n",
    "\u001f\u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0003 \u0005",
    " \u01e2\n \u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0003!\u0005",
    "!\u01ec\n!\u0003\"\u0003\"\u0003\"\u0003\"\u0005\"\u01f2\n\"\u0003#",
    "\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u01fa\n#\u0003$\u0003$\u0007",
    "$\u01fe\n$\f$\u000e$\u0201\u000b$\u0003$\u0007$\u0204\n$\f$\u000e$\u0207",
    "\u000b$\u0003$\u0003$\u0003%\u0007%\u020c\n%\f%\u000e%\u020f\u000b%",
    "\u0003%\u0003%\u0005%\u0213\n%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003",
    "&\u0003&\u0003&\u0005&\u021d\n&\u0003\'\u0003\'\u0006\'\u0221\n\'\r",
    "\'\u000e\'\u0222\u0003\'\u0003\'\u0003(\u0003(\u0003(\u0003)\u0003)",
    "\u0003)\u0003)\u0003)\u0003)\u0005)\u0230\n)\u0003*\u0003*\u0003*\u0006",
    "*\u0235\n*\r*\u000e*\u0236\u0003*\u0003*\u0003+\u0003+\u0003+\u0003",
    "+\u0003+\u0003+\u0005+\u0241\n+\u0003,\u0003,\u0005,\u0245\n,\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0006-\u024c\n-\r-\u000e-\u024d\u0003",
    "-\u0005-\u0251\n-\u0003-\u0003-\u0003.\u0003.\u0005.\u0257\n.\u0003",
    ".\u0003.\u0005.\u025b\n.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0262",
    "\n.\u0003/\u0003/\u0003/\u0003/\u0005/\u0268\n/\u0003/\u0007/\u026b",
    "\n/\f/\u000e/\u026e\u000b/\u0003/\u0007/\u0271\n/\f/\u000e/\u0274\u000b",
    "/\u0003/\u0003/\u00030\u00050\u0279\n0\u00030\u00030\u00030\u00050\u027e",
    "\n0\u00030\u00070\u0281\n0\f0\u000e0\u0284\u000b0\u00030\u00070\u0287",
    "\n0\f0\u000e0\u028a\u000b0\u00030\u00030\u00031\u00031\u00031\u0003",
    "1\u00031\u00031\u00031\u00031\u00031\u00051\u0297\n1\u00032\u00032\u0003",
    "2\u00032\u00032\u00032\u00032\u00032\u00052\u02a1\n2\u00032\u00032\u0005",
    "2\u02a5\n2\u00033\u00033\u00033\u00034\u00034\u00074\u02ac\n4\f4\u000e",
    "4\u02af\u000b4\u00034\u00034\u00034\u00035\u00035\u00035\u00035\u0003",
    "5\u00035\u00035\u00035\u00035\u00035\u00035\u00065\u02bf\n5\r5\u000e",
    "5\u02c0\u00035\u00035\u00035\u00035\u00065\u02c7\n5\r5\u000e5\u02c8",
    "\u00035\u00035\u00035\u00035\u00065\u02cf\n5\r5\u000e5\u02d0\u00035",
    "\u00035\u00055\u02d5\n5\u00036\u00036\u00036\u00076\u02da\n6\f6\u000e",
    "6\u02dd\u000b6\u00056\u02df\n6\u00036\u00036\u00037\u00037\u00037\u0005",
    "7\u02e6\n7\u00037\u00037\u00038\u00038\u00038\u00078\u02ed\n8\f8\u000e",
    "8\u02f0\u000b8\u00058\u02f2\n8\u00038\u00038\u00039\u00039\u00039\u0005",
    "9\u02f9\n9\u00039\u00039\u0003:\u0003:\u0003:\u0007:\u0300\n:\f:\u000e",
    ":\u0303\u000b:\u0005:\u0305\n:\u0003:\u0003:\u0003;\u0003;\u0003;\u0005",
    ";\u030c\n;\u0003;\u0003;\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003",
    "=\u0003=\u0005=\u0318\n=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003>\u0003",
    ">\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005",
    "?\u032a\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u0332\n",
    "@\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003",
    "C\u0003C\u0003C\u0005C\u0340\nC\u0003D\u0003D\u0003D\u0003D\u0003D\u0003",
    "D\u0005D\u0348\nD\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0350",
    "\nE\u0003F\u0003F\u0003F\u0003F\u0005F\u0356\nF\u0003F\u0003F\u0003",
    "G\u0003G\u0003G\u0003G\u0005G\u035e\nG\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0003H\u0005H\u0368\nH\u0003I\u0005I\u036b\nI\u0003",
    "I\u0003I\u0003I\u0003J\u0003J\u0003J\u0005J\u0373\nJ\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0003K\u0003K\u0005K\u037c\nK\u0003L\u0003L\u0003L\u0003",
    "L\u0005L\u0382\nL\u0003M\u0003M\u0003M\u0003M\u0002\u0002N\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u0002\u0004",
    "\u0004\u0002BBFF\u0004\u0002\u0016\u001677\u03b6\u0002\u009d\u0003\u0002",
    "\u0002\u0002\u0004\u00b2\u0003\u0002\u0002\u0002\u0006\u00b4\u0003\u0002",
    "\u0002\u0002\b\u00b8\u0003\u0002\u0002\u0002\n\u00bd\u0003\u0002\u0002",
    "\u0002\f\u00c3\u0003\u0002\u0002\u0002\u000e\u00c5\u0003\u0002\u0002",
    "\u0002\u0010\u00cb\u0003\u0002\u0002\u0002\u0012\u00d3\u0003\u0002\u0002",
    "\u0002\u0014\u00d5\u0003\u0002\u0002\u0002\u0016\u00dc\u0003\u0002\u0002",
    "\u0002\u0018\u00df\u0003\u0002\u0002\u0002\u001a\u00e2\u0003\u0002\u0002",
    "\u0002\u001c\u00ec\u0003\u0002\u0002\u0002\u001e\u00f6\u0003\u0002\u0002",
    "\u0002 \u0100\u0003\u0002\u0002\u0002\"\u010b\u0003\u0002\u0002\u0002",
    "$\u0126\u0003\u0002\u0002\u0002&\u013e\u0003\u0002\u0002\u0002(\u0146",
    "\u0003\u0002\u0002\u0002*\u014e\u0003\u0002\u0002\u0002,\u0158\u0003",
    "\u0002\u0002\u0002.\u0184\u0003\u0002\u0002\u00020\u0186\u0003\u0002",
    "\u0002\u00022\u01a5\u0003\u0002\u0002\u00024\u01a7\u0003\u0002\u0002",
    "\u00026\u01bc\u0003\u0002\u0002\u00028\u01c4\u0003\u0002\u0002\u0002",
    ":\u01cf\u0003\u0002\u0002\u0002<\u01d7\u0003\u0002\u0002\u0002>\u01e1",
    "\u0003\u0002\u0002\u0002@\u01eb\u0003\u0002\u0002\u0002B\u01f1\u0003",
    "\u0002\u0002\u0002D\u01f9\u0003\u0002\u0002\u0002F\u01fb\u0003\u0002",
    "\u0002\u0002H\u020d\u0003\u0002\u0002\u0002J\u021c\u0003\u0002\u0002",
    "\u0002L\u021e\u0003\u0002\u0002\u0002N\u0226\u0003\u0002\u0002\u0002",
    "P\u022f\u0003\u0002\u0002\u0002R\u0231\u0003\u0002\u0002\u0002T\u0240",
    "\u0003\u0002\u0002\u0002V\u0242\u0003\u0002\u0002\u0002X\u0248\u0003",
    "\u0002\u0002\u0002Z\u0261\u0003\u0002\u0002\u0002\\\u0263\u0003\u0002",
    "\u0002\u0002^\u0278\u0003\u0002\u0002\u0002`\u0296\u0003\u0002\u0002",
    "\u0002b\u02a4\u0003\u0002\u0002\u0002d\u02a6\u0003\u0002\u0002\u0002",
    "f\u02a9\u0003\u0002\u0002\u0002h\u02d4\u0003\u0002\u0002\u0002j\u02d6",
    "\u0003\u0002\u0002\u0002l\u02e2\u0003\u0002\u0002\u0002n\u02e9\u0003",
    "\u0002\u0002\u0002p\u02f5\u0003\u0002\u0002\u0002r\u02fc\u0003\u0002",
    "\u0002\u0002t\u0308\u0003\u0002\u0002\u0002v\u030f\u0003\u0002\u0002",
    "\u0002x\u0313\u0003\u0002\u0002\u0002z\u031b\u0003\u0002\u0002\u0002",
    "|\u0329\u0003\u0002\u0002\u0002~\u0331\u0003\u0002\u0002\u0002\u0080",
    "\u0333\u0003\u0002\u0002\u0002\u0082\u0336\u0003\u0002\u0002\u0002\u0084",
    "\u033f\u0003\u0002\u0002\u0002\u0086\u0347\u0003\u0002\u0002\u0002\u0088",
    "\u034f\u0003\u0002\u0002\u0002\u008a\u0351\u0003\u0002\u0002\u0002\u008c",
    "\u035d\u0003\u0002\u0002\u0002\u008e\u0367\u0003\u0002\u0002\u0002\u0090",
    "\u036a\u0003\u0002\u0002\u0002\u0092\u036f\u0003\u0002\u0002\u0002\u0094",
    "\u037b\u0003\u0002\u0002\u0002\u0096\u0381\u0003\u0002\u0002\u0002\u0098",
    "\u0383\u0003\u0002\u0002\u0002\u009a\u009c\u0005\u0004\u0003\u0002\u009b",
    "\u009a\u0003\u0002\u0002\u0002\u009c\u009f\u0003\u0002\u0002\u0002\u009d",
    "\u009b\u0003\u0002\u0002\u0002\u009d\u009e\u0003\u0002\u0002\u0002\u009e",
    "\u00aa\u0003\u0002\u0002\u0002\u009f\u009d\u0003\u0002\u0002\u0002\u00a0",
    "\u00a3\u0005\f\u0007\u0002\u00a1\u00a3\u0005\u0010\t\u0002\u00a2\u00a0",
    "\u0003\u0002\u0002\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a7",
    "\u0003\u0002\u0002\u0002\u00a4\u00a6\u0005\u0012\n\u0002\u00a5\u00a4",
    "\u0003\u0002\u0002\u0002\u00a6\u00a9\u0003\u0002\u0002\u0002\u00a7\u00a5",
    "\u0003\u0002\u0002\u0002\u00a7\u00a8\u0003\u0002\u0002\u0002\u00a8\u00ab",
    "\u0003\u0002\u0002\u0002\u00a9\u00a7\u0003\u0002\u0002\u0002\u00aa\u00a2",
    "\u0003\u0002\u0002\u0002\u00aa\u00ab\u0003\u0002\u0002\u0002\u00ab\u00ac",
    "\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007\u0002\u0002\u0003\u00ad\u00ae",
    "\b\u0002\u0001\u0002\u00ae\u0003\u0003\u0002\u0002\u0002\u00af\u00b3",
    "\u0005\u0006\u0004\u0002\u00b0\u00b3\u0005\b\u0005\u0002\u00b1\u00b3",
    "\u0005\n\u0006\u0002\u00b2\u00af\u0003\u0002\u0002\u0002\u00b2\u00b0",
    "\u0003\u0002\u0002\u0002\u00b2\u00b1\u0003\u0002\u0002\u0002\u00b3\u0005",
    "\u0003\u0002\u0002\u0002\u00b4\u00b5\u0007\u0018\u0002\u0002\u00b5\u00b6",
    "\u00079\u0002\u0002\u00b6\u00b7\b\u0004\u0001\u0002\u00b7\u0007\u0003",
    "\u0002\u0002\u0002\u00b8\u00b9\u0007\u001b\u0002\u0002\u00b9\u00ba\u0007",
    ":\u0002\u0002\u00ba\u00bb\u00079\u0002\u0002\u00bb\u00bc\b\u0005\u0001",
    "\u0002\u00bc\t\u0003\u0002\u0002\u0002\u00bd\u00be\u0007\u0019\u0002",
    "\u0002\u00be\u00bf\u00079\u0002\u0002\u00bf\u00c0\b\u0006\u0001\u0002",
    "\u00c0\u000b\u0003\u0002\u0002\u0002\u00c1\u00c4\u0005\u000e\b\u0002",
    "\u00c2\u00c4\u0005\u0014\u000b\u0002\u00c3\u00c1\u0003\u0002\u0002\u0002",
    "\u00c3\u00c2\u0003\u0002\u0002\u0002\u00c4\r\u0003\u0002\u0002\u0002",
    "\u00c5\u00c6\u0007\u001c\u0002\u0002\u00c6\u00c7\u0007\u0003\u0002\u0002",
    "\u00c7\u00c8\u0005\u0016\f\u0002\u00c8\u00c9\b\b\u0001\u0002\u00c9\u000f",
    "\u0003\u0002\u0002\u0002\u00ca\u00cc\u0005z>\u0002\u00cb\u00ca\u0003",
    "\u0002\u0002\u0002\u00cc\u00cd\u0003\u0002\u0002\u0002\u00cd\u00cb\u0003",
    "\u0002\u0002\u0002\u00cd\u00ce\u0003\u0002\u0002\u0002\u00ce\u00cf\u0003",
    "\u0002\u0002\u0002\u00cf\u00d0\b\t\u0001\u0002\u00d0\u0011\u0003\u0002",
    "\u0002\u0002\u00d1\u00d4\u0005\u0004\u0003\u0002\u00d2\u00d4\u0005\f",
    "\u0007\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d3\u00d2\u0003\u0002",
    "\u0002\u0002\u00d4\u0013\u0003\u0002\u0002\u0002\u00d5\u00d8\u0005\u0084",
    "C\u0002\u00d6\u00d9\u0005\u0016\f\u0002\u00d7\u00d9\u0007\u001a\u0002",
    "\u0002\u00d8\u00d6\u0003\u0002\u0002\u0002\u00d8\u00d7\u0003\u0002\u0002",
    "\u0002\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00db\b\u000b\u0001",
    "\u0002\u00db\u0015\u0003\u0002\u0002\u0002\u00dc\u00dd\u0005\u001a\u000e",
    "\u0002\u00dd\u00de\b\f\u0001\u0002\u00de\u0017\u0003\u0002\u0002\u0002",
    "\u00df\u00e0\u0005\u001c\u000f\u0002\u00e0\u00e1\b\r\u0001\u0002\u00e1",
    "\u0019\u0003\u0002\u0002\u0002\u00e2\u00e7\u0005\u001e\u0010\u0002\u00e3",
    "\u00e4\u0007%\u0002\u0002\u00e4\u00e6\u0005\u001e\u0010\u0002\u00e5",
    "\u00e3\u0003\u0002\u0002\u0002\u00e6\u00e9\u0003\u0002\u0002\u0002\u00e7",
    "\u00e5\u0003\u0002\u0002\u0002\u00e7\u00e8\u0003\u0002\u0002\u0002\u00e8",
    "\u00ea\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002\u00ea",
    "\u00eb\b\u000e\u0001\u0002\u00eb\u001b\u0003\u0002\u0002\u0002\u00ec",
    "\u00f1\u0005 \u0011\u0002\u00ed\u00ee\u0007%\u0002\u0002\u00ee\u00f0",
    "\u0005 \u0011\u0002\u00ef\u00ed\u0003\u0002\u0002\u0002\u00f0\u00f3",
    "\u0003\u0002\u0002\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f1\u00f2",
    "\u0003\u0002\u0002\u0002\u00f2\u00f4\u0003\u0002\u0002\u0002\u00f3\u00f1",
    "\u0003\u0002\u0002\u0002\u00f4\u00f5\b\u000f\u0001\u0002\u00f5\u001d",
    "\u0003\u0002\u0002\u0002\u00f6\u00fb\u0005\"\u0012\u0002\u00f7\u00f8",
    "\u0007$\u0002\u0002\u00f8\u00fa\u0005\"\u0012\u0002\u00f9\u00f7\u0003",
    "\u0002\u0002\u0002\u00fa\u00fd\u0003\u0002\u0002\u0002\u00fb\u00f9\u0003",
    "\u0002\u0002\u0002\u00fb\u00fc\u0003\u0002\u0002\u0002\u00fc\u00fe\u0003",
    "\u0002\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff\b",
    "\u0010\u0001\u0002\u00ff\u001f\u0003\u0002\u0002\u0002\u0100\u0105\u0005",
    "\u0090I\u0002\u0101\u0102\u0007$\u0002\u0002\u0102\u0104\u0005\u0090",
    "I\u0002\u0103\u0101\u0003\u0002\u0002\u0002\u0104\u0107\u0003\u0002",
    "\u0002\u0002\u0105\u0103\u0003\u0002\u0002\u0002\u0105\u0106\u0003\u0002",
    "\u0002\u0002\u0106\u0108\u0003\u0002\u0002\u0002\u0107\u0105\u0003\u0002",
    "\u0002\u0002\u0108\u0109\b\u0011\u0001\u0002\u0109!\u0003\u0002\u0002",
    "\u0002\u010a\u010c\u00072\u0002\u0002\u010b\u010a\u0003\u0002\u0002",
    "\u0002\u010b\u010c\u0003\u0002\u0002\u0002\u010c\u010d\u0003\u0002\u0002",
    "\u0002\u010d\u010e\u0005$\u0013\u0002\u010e\u010f\b\u0012\u0001\u0002",
    "\u010f#\u0003\u0002\u0002\u0002\u0110\u0112\u00054\u001b\u0002\u0111",
    "\u0113\u0005(\u0015\u0002\u0112\u0111\u0003\u0002\u0002\u0002\u0112",
    "\u0113\u0003\u0002\u0002\u0002\u0113\u0114\u0003\u0002\u0002\u0002\u0114",
    "\u0115\b\u0013\u0001\u0002\u0115\u0127\u0003\u0002\u0002\u0002\u0116",
    "\u0117\u00050\u0019\u0002\u0117\u0118\b\u0013\u0001\u0002\u0118\u0127",
    "\u0003\u0002\u0002\u0002\u0119\u011b\u0005(\u0015\u0002\u011a\u011c",
    "\u00054\u001b\u0002\u011b\u011a\u0003\u0002\u0002\u0002\u011b\u011c",
    "\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011e",
    "\b\u0013\u0001\u0002\u011e\u0127\u0003\u0002\u0002\u0002\u011f\u0120",
    "\u0007\u0004\u0002\u0002\u0120\u0121\u0005\u0016\f\u0002\u0121\u0122",
    "\u0007\u0005\u0002\u0002\u0122\u0123\b\u0013\u0001\u0002\u0123\u0127",
    "\u0003\u0002\u0002\u0002\u0124\u0125\u0007\u0006\u0002\u0002\u0125\u0127",
    "\b\u0013\u0001\u0002\u0126\u0110\u0003\u0002\u0002\u0002\u0126\u0116",
    "\u0003\u0002\u0002\u0002\u0126\u0119\u0003\u0002\u0002\u0002\u0126\u011f",
    "\u0003\u0002\u0002\u0002\u0126\u0124\u0003\u0002\u0002\u0002\u0127%",
    "\u0003\u0002\u0002\u0002\u0128\u012a\u00052\u001a\u0002\u0129\u012b",
    "\u0005*\u0016\u0002\u012a\u0129\u0003\u0002\u0002\u0002\u012a\u012b",
    "\u0003\u0002\u0002\u0002\u012b\u012c\u0003\u0002\u0002\u0002\u012c\u012d",
    "\b\u0014\u0001\u0002\u012d\u013f\u0003\u0002\u0002\u0002\u012e\u012f",
    "\u0005.\u0018\u0002\u012f\u0130\b\u0014\u0001\u0002\u0130\u013f\u0003",
    "\u0002\u0002\u0002\u0131\u0133\u0005*\u0016\u0002\u0132\u0134\u0005",
    "2\u001a\u0002\u0133\u0132\u0003\u0002\u0002\u0002\u0133\u0134\u0003",
    "\u0002\u0002\u0002\u0134\u0135\u0003\u0002\u0002\u0002\u0135\u0136\b",
    "\u0014\u0001\u0002\u0136\u013f\u0003\u0002\u0002\u0002\u0137\u0138\u0007",
    "\u0004\u0002\u0002\u0138\u0139\u0005\u0016\f\u0002\u0139\u013a\u0007",
    "\u0005\u0002\u0002\u013a\u013b\b\u0014\u0001\u0002\u013b\u013f\u0003",
    "\u0002\u0002\u0002\u013c\u013d\u0007\u0006\u0002\u0002\u013d\u013f\b",
    "\u0014\u0001\u0002\u013e\u0128\u0003\u0002\u0002\u0002\u013e\u012e\u0003",
    "\u0002\u0002\u0002\u013e\u0131\u0003\u0002\u0002\u0002\u013e\u0137\u0003",
    "\u0002\u0002\u0002\u013e\u013c\u0003\u0002\u0002\u0002\u013f\'\u0003",
    "\u0002\u0002\u0002\u0140\u0141\u0005F$\u0002\u0141\u0142\b\u0015\u0001",
    "\u0002\u0142\u0147\u0003\u0002\u0002\u0002\u0143\u0144\u0005,\u0017",
    "\u0002\u0144\u0145\b\u0015\u0001\u0002\u0145\u0147\u0003\u0002\u0002",
    "\u0002\u0146\u0140\u0003\u0002\u0002\u0002\u0146\u0143\u0003\u0002\u0002",
    "\u0002\u0147)\u0003\u0002\u0002\u0002\u0148\u0149\u0005H%\u0002\u0149",
    "\u014a\b\u0016\u0001\u0002\u014a\u014f\u0003\u0002\u0002\u0002\u014b",
    "\u014c\u0005,\u0017\u0002\u014c\u014d\b\u0016\u0001\u0002\u014d\u014f",
    "\u0003\u0002\u0002\u0002\u014e\u0148\u0003\u0002\u0002\u0002\u014e\u014b",
    "\u0003\u0002\u0002\u0002\u014f+\u0003\u0002\u0002\u0002\u0150\u0151",
    "\u0007=\u0002\u0002\u0151\u0159\b\u0017\u0001\u0002\u0152\u0153\u0007",
    "<\u0002\u0002\u0153\u0159\b\u0017\u0001\u0002\u0154\u0155\u0007\u0007",
    "\u0002\u0002\u0155\u0156\u0005\u0084C\u0002\u0156\u0157\b\u0017\u0001",
    "\u0002\u0157\u0159\u0003\u0002\u0002\u0002\u0158\u0150\u0003\u0002\u0002",
    "\u0002\u0158\u0152\u0003\u0002\u0002\u0002\u0158\u0154\u0003\u0002\u0002",
    "\u0002\u0159-\u0003\u0002\u0002\u0002\u015a\u015e\u0007 \u0002\u0002",
    "\u015b\u015d\u00058\u001d\u0002\u015c\u015b\u0003\u0002\u0002\u0002",
    "\u015d\u0160\u0003\u0002\u0002\u0002\u015e\u015c\u0003\u0002\u0002\u0002",
    "\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0161\u0003\u0002\u0002\u0002",
    "\u0160\u015e\u0003\u0002\u0002\u0002\u0161\u0185\b\u0018\u0001\u0002",
    "\u0162\u0166\u00056\u001c\u0002\u0163\u0165\u0005:\u001e\u0002\u0164",
    "\u0163\u0003\u0002\u0002\u0002\u0165\u0168\u0003\u0002\u0002\u0002\u0166",
    "\u0164\u0003\u0002\u0002\u0002\u0166\u0167\u0003\u0002\u0002\u0002\u0167",
    "\u0169\u0003\u0002\u0002\u0002\u0168\u0166\u0003\u0002\u0002\u0002\u0169",
    "\u016a\b\u0018\u0001\u0002\u016a\u0185\u0003\u0002\u0002\u0002\u016b",
    "\u016f\u0005\u0082B\u0002\u016c\u016e\u00058\u001d\u0002\u016d\u016c",
    "\u0003\u0002\u0002\u0002\u016e\u0171\u0003\u0002\u0002\u0002\u016f\u016d",
    "\u0003\u0002\u0002\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0172",
    "\u0003\u0002\u0002\u0002\u0171\u016f\u0003\u0002\u0002\u0002\u0172\u0173",
    "\b\u0018\u0001\u0002\u0173\u0185\u0003\u0002\u0002\u0002\u0174\u0178",
    "\u0005f4\u0002\u0175\u0177\u00058\u001d\u0002\u0176\u0175\u0003\u0002",
    "\u0002\u0002\u0177\u017a\u0003\u0002\u0002\u0002\u0178\u0176\u0003\u0002",
    "\u0002\u0002\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017b\u0003\u0002",
    "\u0002\u0002\u017a\u0178\u0003\u0002\u0002\u0002\u017b\u017c\b\u0018",
    "\u0001\u0002\u017c\u0185\u0003\u0002\u0002\u0002\u017d\u017f\u0005>",
    " \u0002\u017e\u017d\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002",
    "\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002\u0180\u0181\u0003\u0002",
    "\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0183\b\u0018",
    "\u0001\u0002\u0183\u0185\u0003\u0002\u0002\u0002\u0184\u015a\u0003\u0002",
    "\u0002\u0002\u0184\u0162\u0003\u0002\u0002\u0002\u0184\u016b\u0003\u0002",
    "\u0002\u0002\u0184\u0174\u0003\u0002\u0002\u0002\u0184\u017e\u0003\u0002",
    "\u0002\u0002\u0185/\u0003\u0002\u0002\u0002\u0186\u018a\u0005.\u0018",
    "\u0002\u0187\u0189\u0005x=\u0002\u0188\u0187\u0003\u0002\u0002\u0002",
    "\u0189\u018c\u0003\u0002\u0002\u0002\u018a\u0188\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u0190\u0003\u0002\u0002\u0002",
    "\u018c\u018a\u0003\u0002\u0002\u0002\u018d\u018f\u0005z>\u0002\u018e",
    "\u018d\u0003\u0002\u0002\u0002\u018f\u0192\u0003\u0002\u0002\u0002\u0190",
    "\u018e\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191",
    "\u0193\u0003\u0002\u0002\u0002\u0192\u0190\u0003\u0002\u0002\u0002\u0193",
    "\u0194\b\u0019\u0001\u0002\u01941\u0003\u0002\u0002\u0002\u0195\u0199",
    "\u00056\u001c\u0002\u0196\u0198\u0005:\u001e\u0002\u0197\u0196\u0003",
    "\u0002\u0002\u0002\u0198\u019b\u0003\u0002\u0002\u0002\u0199\u0197\u0003",
    "\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a\u019c\u0003",
    "\u0002\u0002\u0002\u019b\u0199\u0003\u0002\u0002\u0002\u019c\u019d\b",
    "\u001a\u0001\u0002\u019d\u01a6\u0003\u0002\u0002\u0002\u019e\u01a0\u0005",
    ":\u001e\u0002\u019f\u019e\u0003\u0002\u0002\u0002\u01a0\u01a1\u0003",
    "\u0002\u0002\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003",
    "\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a4\b",
    "\u001a\u0001\u0002\u01a4\u01a6\u0003\u0002\u0002\u0002\u01a5\u0195\u0003",
    "\u0002\u0002\u0002\u01a5\u019f\u0003\u0002\u0002\u0002\u01a63\u0003",
    "\u0002\u0002\u0002\u01a7\u01ab\u00052\u001a\u0002\u01a8\u01aa\u0005",
    "x=\u0002\u01a9\u01a8\u0003\u0002\u0002\u0002\u01aa\u01ad\u0003\u0002",
    "\u0002\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab\u01ac\u0003\u0002",
    "\u0002\u0002\u01ac\u01b1\u0003\u0002\u0002\u0002\u01ad\u01ab\u0003\u0002",
    "\u0002\u0002\u01ae\u01b0\u0005z>\u0002\u01af\u01ae\u0003\u0002\u0002",
    "\u0002\u01b0\u01b3\u0003\u0002\u0002\u0002\u01b1\u01af\u0003\u0002\u0002",
    "\u0002\u01b1\u01b2\u0003\u0002\u0002\u0002\u01b2\u01b4\u0003\u0002\u0002",
    "\u0002\u01b3\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b5\b\u001b\u0001",
    "\u0002\u01b55\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007!\u0002\u0002",
    "\u01b7\u01bd\b\u001c\u0001\u0002\u01b8\u01b9\u0007#\u0002\u0002\u01b9",
    "\u01bd\b\u001c\u0001\u0002\u01ba\u01bb\u0007\"\u0002\u0002\u01bb\u01bd",
    "\b\u001c\u0001\u0002\u01bc\u01b6\u0003\u0002\u0002\u0002\u01bc\u01b8",
    "\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bd7",
    "\u0003\u0002\u0002\u0002\u01be\u01bf\u0005:\u001e\u0002\u01bf\u01c0",
    "\b\u001d\u0001\u0002\u01c0\u01c5\u0003\u0002\u0002\u0002\u01c1\u01c2",
    "\u0005> \u0002\u01c2\u01c3\b\u001d\u0001\u0002\u01c3\u01c5\u0003\u0002",
    "\u0002\u0002\u01c4\u01be\u0003\u0002\u0002\u0002\u01c4\u01c1\u0003\u0002",
    "\u0002\u0002\u01c59\u0003\u0002\u0002\u0002\u01c6\u01c7\u0005<\u001f",
    "\u0002\u01c7\u01c8\u0007B\u0002\u0002\u01c8\u01c9\b\u001e\u0001\u0002",
    "\u01c9\u01d0\u0003\u0002\u0002\u0002\u01ca\u01cc\u0007>\u0002\u0002",
    "\u01cb\u01cd\u0007?\u0002\u0002\u01cc\u01cb\u0003\u0002\u0002\u0002",
    "\u01cc\u01cd\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002",
    "\u01ce\u01d0\b\u001e\u0001\u0002\u01cf\u01c6\u0003\u0002\u0002\u0002",
    "\u01cf\u01ca\u0003\u0002\u0002\u0002\u01d0;\u0003\u0002\u0002\u0002",
    "\u01d1\u01d2\u0007-\u0002\u0002\u01d2\u01d8\b\u001f\u0001\u0002\u01d3",
    "\u01d4\u0007.\u0002\u0002\u01d4\u01d8\b\u001f\u0001\u0002\u01d5\u01d6",
    "\u0007/\u0002\u0002\u01d6\u01d8\b\u001f\u0001\u0002\u01d7\u01d1\u0003",
    "\u0002\u0002\u0002\u01d7\u01d3\u0003\u0002\u0002\u0002\u01d7\u01d5\u0003",
    "\u0002\u0002\u0002\u01d8=\u0003\u0002\u0002\u0002\u01d9\u01da\u0005",
    "@!\u0002\u01da\u01db\u0005D#\u0002\u01db\u01dc\b \u0001\u0002\u01dc",
    "\u01e2\u0003\u0002\u0002\u0002\u01dd\u01de\u0005B\"\u0002\u01de\u01df",
    "\u0007B\u0002\u0002\u01df\u01e0\b \u0001\u0002\u01e0\u01e2\u0003\u0002",
    "\u0002\u0002\u01e1\u01d9\u0003\u0002\u0002\u0002\u01e1\u01dd\u0003\u0002",
    "\u0002\u0002\u01e2?\u0003\u0002\u0002\u0002\u01e3\u01e4\u0007)\u0002",
    "\u0002\u01e4\u01ec\b!\u0001\u0002\u01e5\u01e6\u0007*\u0002\u0002\u01e6",
    "\u01ec\b!\u0001\u0002\u01e7\u01e8\u0007+\u0002\u0002\u01e8\u01ec\b!",
    "\u0001\u0002\u01e9\u01ea\u0007,\u0002\u0002\u01ea\u01ec\b!\u0001\u0002",
    "\u01eb\u01e3\u0003\u0002\u0002\u0002\u01eb\u01e5\u0003\u0002\u0002\u0002",
    "\u01eb\u01e7\u0003\u0002\u0002\u0002\u01eb\u01e9\u0003\u0002\u0002\u0002",
    "\u01ecA\u0003\u0002\u0002\u0002\u01ed\u01ee\u00070\u0002\u0002\u01ee",
    "\u01f2\b\"\u0001\u0002\u01ef\u01f0\u00071\u0002\u0002\u01f0\u01f2\b",
    "\"\u0001\u0002\u01f1\u01ed\u0003\u0002\u0002\u0002\u01f1\u01ef\u0003",
    "\u0002\u0002\u0002\u01f2C\u0003\u0002\u0002\u0002\u01f3\u01f4\u0007",
    "B\u0002\u0002\u01f4\u01fa\b#\u0001\u0002\u01f5\u01f6\u0007C\u0002\u0002",
    "\u01f6\u01fa\b#\u0001\u0002\u01f7\u01f8\u0007D\u0002\u0002\u01f8\u01fa",
    "\b#\u0001\u0002\u01f9\u01f3\u0003\u0002\u0002\u0002\u01f9\u01f5\u0003",
    "\u0002\u0002\u0002\u01f9\u01f7\u0003\u0002\u0002\u0002\u01faE\u0003",
    "\u0002\u0002\u0002\u01fb\u01ff\u0005H%\u0002\u01fc\u01fe\u0005x=\u0002",
    "\u01fd\u01fc\u0003\u0002\u0002\u0002\u01fe\u0201\u0003\u0002\u0002\u0002",
    "\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002",
    "\u0200\u0205\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002",
    "\u0202\u0204\u0005z>\u0002\u0203\u0202\u0003\u0002\u0002\u0002\u0204",
    "\u0207\u0003\u0002\u0002\u0002\u0205\u0203\u0003\u0002\u0002\u0002\u0205",
    "\u0206\u0003\u0002\u0002\u0002\u0206\u0208\u0003\u0002\u0002\u0002\u0207",
    "\u0205\u0003\u0002\u0002\u0002\u0208\u0209\b$\u0001\u0002\u0209G\u0003",
    "\u0002\u0002\u0002\u020a\u020c\u0005J&\u0002\u020b\u020a\u0003\u0002",
    "\u0002\u0002\u020c\u020f\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002",
    "\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e\u0210\u0003\u0002",
    "\u0002\u0002\u020f\u020d\u0003\u0002\u0002\u0002\u0210\u0212\u0007\b",
    "\u0002\u0002\u0211\u0213\u0005N(\u0002\u0212\u0211\u0003\u0002\u0002",
    "\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002",
    "\u0002\u0214\u0215\u0007\t\u0002\u0002\u0215\u0216\b%\u0001\u0002\u0216",
    "I\u0003\u0002\u0002\u0002\u0217\u0218\u0005L\'\u0002\u0218\u0219\b&",
    "\u0001\u0002\u0219\u021d\u0003\u0002\u0002\u0002\u021a\u021b\u0007\u001e",
    "\u0002\u0002\u021b\u021d\b&\u0001\u0002\u021c\u0217\u0003\u0002\u0002",
    "\u0002\u021c\u021a\u0003\u0002\u0002\u0002\u021dK\u0003\u0002\u0002",
    "\u0002\u021e\u0220\u0007\u001f\u0002\u0002\u021f\u0221\u0005~@\u0002",
    "\u0220\u021f\u0003\u0002\u0002\u0002\u0221\u0222\u0003\u0002\u0002\u0002",
    "\u0222\u0220\u0003\u0002\u0002\u0002\u0222\u0223\u0003\u0002\u0002\u0002",
    "\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0225\b\'\u0001\u0002\u0225",
    "M\u0003\u0002\u0002\u0002\u0226\u0227\u0005P)\u0002\u0227\u0228\b(\u0001",
    "\u0002\u0228O\u0003\u0002\u0002\u0002\u0229\u022a\u0005T+\u0002\u022a",
    "\u022b\b)\u0001\u0002\u022b\u0230\u0003\u0002\u0002\u0002\u022c\u022d",
    "\u0005R*\u0002\u022d\u022e\b)\u0001\u0002\u022e\u0230\u0003\u0002\u0002",
    "\u0002\u022f\u0229\u0003\u0002\u0002\u0002\u022f\u022c\u0003\u0002\u0002",
    "\u0002\u0230Q\u0003\u0002\u0002\u0002\u0231\u0234\u0005T+\u0002\u0232",
    "\u0233\u0007\n\u0002\u0002\u0233\u0235\u0005T+\u0002\u0234\u0232\u0003",
    "\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0234\u0003",
    "\u0002\u0002\u0002\u0236\u0237\u0003\u0002\u0002\u0002\u0237\u0238\u0003",
    "\u0002\u0002\u0002\u0238\u0239\b*\u0001\u0002\u0239S\u0003\u0002\u0002",
    "\u0002\u023a\u023b\u0005V,\u0002\u023b\u023c\b+\u0001\u0002\u023c\u0241",
    "\u0003\u0002\u0002\u0002\u023d\u023e\u0005X-\u0002\u023e\u023f\b+\u0001",
    "\u0002\u023f\u0241\u0003\u0002\u0002\u0002\u0240\u023a\u0003\u0002\u0002",
    "\u0002\u0240\u023d\u0003\u0002\u0002\u0002\u0241U\u0003\u0002\u0002",
    "\u0002\u0242\u0244\u0005Z.\u0002\u0243\u0245\u0007\u000b\u0002\u0002",
    "\u0244\u0243\u0003\u0002\u0002\u0002\u0244\u0245\u0003\u0002\u0002\u0002",
    "\u0245\u0246\u0003\u0002\u0002\u0002\u0246\u0247\b,\u0001\u0002\u0247",
    "W\u0003\u0002\u0002\u0002\u0248\u024b\u0005Z.\u0002\u0249\u024a\u0007",
    "\u000b\u0002\u0002\u024a\u024c\u0005Z.\u0002\u024b\u0249\u0003\u0002",
    "\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002",
    "\u0002\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u0250\u0003\u0002",
    "\u0002\u0002\u024f\u0251\u0007\u000b\u0002\u0002\u0250\u024f\u0003\u0002",
    "\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002",
    "\u0002\u0002\u0252\u0253\b-\u0001\u0002\u0253Y\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0007\f\u0002\u0002\u0255\u0257\u0005\u0086D\u0002\u0256",
    "\u0254\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257",
    "\u025a\u0003\u0002\u0002\u0002\u0258\u025b\u0005^0\u0002\u0259\u025b",
    "\u0005\\/\u0002\u025a\u0258\u0003\u0002\u0002\u0002\u025a\u0259\u0003",
    "\u0002\u0002\u0002\u025b\u025c\u0003\u0002\u0002\u0002\u025c\u025d\b",
    ".\u0001\u0002\u025d\u0262\u0003\u0002\u0002\u0002\u025e\u025f\u0005",
    "v<\u0002\u025f\u0260\b.\u0001\u0002\u0260\u0262\u0003\u0002\u0002\u0002",
    "\u0261\u0256\u0003\u0002\u0002\u0002\u0261\u025e\u0003\u0002\u0002\u0002",
    "\u0262[\u0003\u0002\u0002\u0002\u0263\u0264\u0007\u0004\u0002\u0002",
    "\u0264\u0265\u0005N(\u0002\u0265\u0267\u0007\u0005\u0002\u0002\u0266",
    "\u0268\u0005`1\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0267\u0268",
    "\u0003\u0002\u0002\u0002\u0268\u026c\u0003\u0002\u0002\u0002\u0269\u026b",
    "\u0005x=\u0002\u026a\u0269\u0003\u0002\u0002\u0002\u026b\u026e\u0003",
    "\u0002\u0002\u0002\u026c\u026a\u0003\u0002\u0002\u0002\u026c\u026d\u0003",
    "\u0002\u0002\u0002\u026d\u0272\u0003\u0002\u0002\u0002\u026e\u026c\u0003",
    "\u0002\u0002\u0002\u026f\u0271\u0005z>\u0002\u0270\u026f\u0003\u0002",
    "\u0002\u0002\u0271\u0274\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002",
    "\u0002\u0002\u0272\u0273\u0003\u0002\u0002\u0002\u0273\u0275\u0003\u0002",
    "\u0002\u0002\u0274\u0272\u0003\u0002\u0002\u0002\u0275\u0276\b/\u0001",
    "\u0002\u0276]\u0003\u0002\u0002\u0002\u0277\u0279\u0005d3\u0002\u0278",
    "\u0277\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279",
    "\u027a\u0003\u0002\u0002\u0002\u027a\u027b\u0005~@\u0002\u027b\u027d",
    "\u0005\u0018\r\u0002\u027c\u027e\u0005`1\u0002\u027d\u027c\u0003\u0002",
    "\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e\u0282\u0003\u0002",
    "\u0002\u0002\u027f\u0281\u0005x=\u0002\u0280\u027f\u0003\u0002\u0002",
    "\u0002\u0281\u0284\u0003\u0002\u0002\u0002\u0282\u0280\u0003\u0002\u0002",
    "\u0002\u0282\u0283\u0003\u0002\u0002\u0002\u0283\u0288\u0003\u0002\u0002",
    "\u0002\u0284\u0282\u0003\u0002\u0002\u0002\u0285\u0287\u0005z>\u0002",
    "\u0286\u0285\u0003\u0002\u0002\u0002\u0287\u028a\u0003\u0002\u0002\u0002",
    "\u0288\u0286\u0003\u0002\u0002\u0002\u0288\u0289\u0003\u0002\u0002\u0002",
    "\u0289\u028b\u0003\u0002\u0002\u0002\u028a\u0288\u0003\u0002\u0002\u0002",
    "\u028b\u028c\b0\u0001\u0002\u028c_\u0003\u0002\u0002\u0002\u028d\u028e",
    "\u0007F\u0002\u0002\u028e\u0297\b1\u0001\u0002\u028f\u0290\u0007\r\u0002",
    "\u0002\u0290\u0297\b1\u0001\u0002\u0291\u0292\u0007\u000e\u0002\u0002",
    "\u0292\u0297\b1\u0001\u0002\u0293\u0294\u0005b2\u0002\u0294\u0295\b",
    "1\u0001\u0002\u0295\u0297\u0003\u0002\u0002\u0002\u0296\u028d\u0003",
    "\u0002\u0002\u0002\u0296\u028f\u0003\u0002\u0002\u0002\u0296\u0291\u0003",
    "\u0002\u0002\u0002\u0296\u0293\u0003\u0002\u0002\u0002\u0297a\u0003",
    "\u0002\u0002\u0002\u0298\u0299\u0007\b\u0002\u0002\u0299\u029a\u0007",
    "B\u0002\u0002\u029a\u029b\u0007\t\u0002\u0002\u029b\u02a5\b2\u0001\u0002",
    "\u029c\u029d\u0007\b\u0002\u0002\u029d\u029e\u0007B\u0002\u0002\u029e",
    "\u02a0\u0007\u000f\u0002\u0002\u029f\u02a1\t\u0002\u0002\u0002\u02a0",
    "\u029f\u0003\u0002\u0002\u0002\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1",
    "\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0007\t\u0002\u0002\u02a3",
    "\u02a5\b2\u0001\u0002\u02a4\u0298\u0003\u0002\u0002\u0002\u02a4\u029c",
    "\u0003\u0002\u0002\u0002\u02a5c\u0003\u0002\u0002\u0002\u02a6\u02a7",
    "\u0007\u0010\u0002\u0002\u02a7\u02a8\b3\u0001\u0002\u02a8e\u0003\u0002",
    "\u0002\u0002\u02a9\u02ad\u0007\u0011\u0002\u0002\u02aa\u02ac\u0005h",
    "5\u0002\u02ab\u02aa\u0003\u0002\u0002\u0002\u02ac\u02af\u0003\u0002",
    "\u0002\u0002\u02ad\u02ab\u0003\u0002\u0002\u0002\u02ad\u02ae\u0003\u0002",
    "\u0002\u0002\u02ae\u02b0\u0003\u0002\u0002\u0002\u02af\u02ad\u0003\u0002",
    "\u0002\u0002\u02b0\u02b1\u0007\u0012\u0002\u0002\u02b1\u02b2\b4\u0001",
    "\u0002\u02b2g\u0003\u0002\u0002\u0002\u02b3\u02b4\u0005j6\u0002\u02b4",
    "\u02b5\b5\u0001\u0002\u02b5\u02d5\u0003\u0002\u0002\u0002\u02b6\u02b7",
    "\u0005n8\u0002\u02b7\u02b8\b5\u0001\u0002\u02b8\u02d5\u0003\u0002\u0002",
    "\u0002\u02b9\u02ba\u0005r:\u0002\u02ba\u02bb\b5\u0001\u0002\u02bb\u02d5",
    "\u0003\u0002\u0002\u0002\u02bc\u02be\u0007\u0006\u0002\u0002\u02bd\u02bf",
    "\u0005l7\u0002\u02be\u02bd\u0003\u0002\u0002\u0002\u02bf\u02c0\u0003",
    "\u0002\u0002\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0\u02c1\u0003",
    "\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3\b",
    "5\u0001\u0002\u02c3\u02d5\u0003\u0002\u0002\u0002\u02c4\u02c6\u0007",
    "\u0006\u0002\u0002\u02c5\u02c7\u0005p9\u0002\u02c6\u02c5\u0003\u0002",
    "\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002",
    "\u0002\u0002\u02c8\u02c9\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002",
    "\u0002\u0002\u02ca\u02cb\b5\u0001\u0002\u02cb\u02d5\u0003\u0002\u0002",
    "\u0002\u02cc\u02ce\u0007\u0006\u0002\u0002\u02cd\u02cf\u0005t;\u0002",
    "\u02ce\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d0\u0003\u0002\u0002\u0002",
    "\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002",
    "\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d3\b5\u0001\u0002\u02d3",
    "\u02d5\u0003\u0002\u0002\u0002\u02d4\u02b3\u0003\u0002\u0002\u0002\u02d4",
    "\u02b6\u0003\u0002\u0002\u0002\u02d4\u02b9\u0003\u0002\u0002\u0002\u02d4",
    "\u02bc\u0003\u0002\u0002\u0002\u02d4\u02c4\u0003\u0002\u0002\u0002\u02d4",
    "\u02cc\u0003\u0002\u0002\u0002\u02d5i\u0003\u0002\u0002\u0002\u02d6",
    "\u02de\u0005\u0094K\u0002\u02d7\u02db\u0007E\u0002\u0002\u02d8\u02da",
    "\u0005l7\u0002\u02d9\u02d8\u0003\u0002\u0002\u0002\u02da\u02dd\u0003",
    "\u0002\u0002\u0002\u02db\u02d9\u0003\u0002\u0002\u0002\u02db\u02dc\u0003",
    "\u0002\u0002\u0002\u02dc\u02df\u0003\u0002\u0002\u0002\u02dd\u02db\u0003",
    "\u0002\u0002\u0002\u02de\u02d7\u0003\u0002\u0002\u0002\u02de\u02df\u0003",
    "\u0002\u0002\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e1\b",
    "6\u0001\u0002\u02e1k\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007\u0013",
    "\u0002\u0002\u02e3\u02e5\u0005\u0094K\u0002\u02e4\u02e6\u0007E\u0002",
    "\u0002\u02e5\u02e4\u0003\u0002\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002",
    "\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002\u02e7\u02e8\b7\u0001\u0002",
    "\u02e8m\u0003\u0002\u0002\u0002\u02e9\u02f1\u0005|?\u0002\u02ea\u02ee",
    "\u0007E\u0002\u0002\u02eb\u02ed\u0005p9\u0002\u02ec\u02eb\u0003\u0002",
    "\u0002\u0002\u02ed\u02f0\u0003\u0002\u0002\u0002\u02ee\u02ec\u0003\u0002",
    "\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f2\u0003\u0002",
    "\u0002\u0002\u02f0\u02ee\u0003\u0002\u0002\u0002\u02f1\u02ea\u0003\u0002",
    "\u0002\u0002\u02f1\u02f2\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002",
    "\u0002\u0002\u02f3\u02f4\b8\u0001\u0002\u02f4o\u0003\u0002\u0002\u0002",
    "\u02f5\u02f6\u0007\u0013\u0002\u0002\u02f6\u02f8\u0005|?\u0002\u02f7",
    "\u02f9\u0007E\u0002\u0002\u02f8\u02f7\u0003\u0002\u0002\u0002\u02f8",
    "\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa",
    "\u02fb\b9\u0001\u0002\u02fbq\u0003\u0002\u0002\u0002\u02fc\u0304\u0007",
    "A\u0002\u0002\u02fd\u0301\u0007E\u0002\u0002\u02fe\u0300\u0005t;\u0002",
    "\u02ff\u02fe\u0003\u0002\u0002\u0002\u0300\u0303\u0003\u0002\u0002\u0002",
    "\u0301\u02ff\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002",
    "\u0302\u0305\u0003\u0002\u0002\u0002\u0303\u0301\u0003\u0002\u0002\u0002",
    "\u0304\u02fd\u0003\u0002\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002",
    "\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\b:\u0001\u0002\u0307",
    "s\u0003\u0002\u0002\u0002\u0308\u0309\u0007\u0013\u0002\u0002\u0309",
    "\u030b\u0007A\u0002\u0002\u030a\u030c\u0007E\u0002\u0002\u030b\u030a",
    "\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002\u0002\u0002\u030c\u030d",
    "\u0003\u0002\u0002\u0002\u030d\u030e\b;\u0001\u0002\u030eu\u0003\u0002",
    "\u0002\u0002\u030f\u0310\u0007\u0014\u0002\u0002\u0310\u0311\u0005\u0086",
    "D\u0002\u0311\u0312\b<\u0001\u0002\u0312w\u0003\u0002\u0002\u0002\u0313",
    "\u0314\u0007\u0015\u0002\u0002\u0314\u0317\u0005~@\u0002\u0315\u0318",
    "\u0005\u0094K\u0002\u0316\u0318\u0005|?\u0002\u0317\u0315\u0003\u0002",
    "\u0002\u0002\u0317\u0316\u0003\u0002\u0002\u0002\u0318\u0319\u0003\u0002",
    "\u0002\u0002\u0319\u031a\b=\u0001\u0002\u031ay\u0003\u0002\u0002\u0002",
    "\u031b\u031c\u0007\u0016\u0002\u0002\u031c\u031d\u0005\u0094K\u0002",
    "\u031d\u031e\t\u0003\u0002\u0002\u031e\u031f\b>\u0001\u0002\u031f{\u0003",
    "\u0002\u0002\u0002\u0320\u0321\u0005\u008aF\u0002\u0321\u0322\b?\u0001",
    "\u0002\u0322\u032a\u0003\u0002\u0002\u0002\u0323\u0324\u0005\u0088E",
    "\u0002\u0324\u0325\b?\u0001\u0002\u0325\u032a\u0003\u0002\u0002\u0002",
    "\u0326\u0327\u0005\u008cG\u0002\u0327\u0328\b?\u0001\u0002\u0328\u032a",
    "\u0003\u0002\u0002\u0002\u0329\u0320\u0003\u0002\u0002\u0002\u0329\u0323",
    "\u0003\u0002\u0002\u0002\u0329\u0326\u0003\u0002\u0002\u0002\u032a}",
    "\u0003\u0002\u0002\u0002\u032b\u032c\u0005\u0094K\u0002\u032c\u032d",
    "\b@\u0001\u0002\u032d\u0332\u0003\u0002\u0002\u0002\u032e\u032f\u0005",
    "\u0080A\u0002\u032f\u0330\b@\u0001\u0002\u0330\u0332\u0003\u0002\u0002",
    "\u0002\u0331\u032b\u0003\u0002\u0002\u0002\u0331\u032e\u0003\u0002\u0002",
    "\u0002\u0332\u007f\u0003\u0002\u0002\u0002\u0333\u0334\u00078\u0002",
    "\u0002\u0334\u0335\bA\u0001\u0002\u0335\u0081\u0003\u0002\u0002\u0002",
    "\u0336\u0337\u0005\u0094K\u0002\u0337\u0338\bB\u0001\u0002\u0338\u0083",
    "\u0003\u0002\u0002\u0002\u0339\u033a\u0005\u0094K\u0002\u033a\u033b",
    "\bC\u0001\u0002\u033b\u0340\u0003\u0002\u0002\u0002\u033c\u033d\u0005",
    "\u0098M\u0002\u033d\u033e\bC\u0001\u0002\u033e\u0340\u0003\u0002\u0002",
    "\u0002\u033f\u0339\u0003\u0002\u0002\u0002\u033f\u033c\u0003\u0002\u0002",
    "\u0002\u0340\u0085\u0003\u0002\u0002\u0002\u0341\u0342\u0005\u0094K",
    "\u0002\u0342\u0343\bD\u0001\u0002\u0343\u0348\u0003\u0002\u0002\u0002",
    "\u0344\u0345\u0005\u0098M\u0002\u0345\u0346\bD\u0001\u0002\u0346\u0348",
    "\u0003\u0002\u0002\u0002\u0347\u0341\u0003\u0002\u0002\u0002\u0347\u0344",
    "\u0003\u0002\u0002\u0002\u0348\u0087\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0007B\u0002\u0002\u034a\u0350\bE\u0001\u0002\u034b\u034c\u0007C\u0002",
    "\u0002\u034c\u0350\bE\u0001\u0002\u034d\u034e\u0007D\u0002\u0002\u034e",
    "\u0350\bE\u0001\u0002\u034f\u0349\u0003\u0002\u0002\u0002\u034f\u034b",
    "\u0003\u0002\u0002\u0002\u034f\u034d\u0003\u0002\u0002\u0002\u0350\u0089",
    "\u0003\u0002\u0002\u0002\u0351\u0355\u0005\u008eH\u0002\u0352\u0356",
    "\u0007A\u0002\u0002\u0353\u0354\u0007\u0017\u0002\u0002\u0354\u0356",
    "\u0005\u0082B\u0002\u0355\u0352\u0003\u0002\u0002\u0002\u0355\u0353",
    "\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357",
    "\u0003\u0002\u0002\u0002\u0357\u0358\bF\u0001\u0002\u0358\u008b\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u00073\u0002\u0002\u035a\u035e\bG\u0001",
    "\u0002\u035b\u035c\u00074\u0002\u0002\u035c\u035e\bG\u0001\u0002\u035d",
    "\u0359\u0003\u0002\u0002\u0002\u035d\u035b\u0003\u0002\u0002\u0002\u035e",
    "\u008d\u0003\u0002\u0002\u0002\u035f\u0360\u0007I\u0002\u0002\u0360",
    "\u0368\bH\u0001\u0002\u0361\u0362\u0007J\u0002\u0002\u0362\u0368\bH",
    "\u0001\u0002\u0363\u0364\u0007G\u0002\u0002\u0364\u0368\bH\u0001\u0002",
    "\u0365\u0366\u0007H\u0002\u0002\u0366\u0368\bH\u0001\u0002\u0367\u035f",
    "\u0003\u0002\u0002\u0002\u0367\u0361\u0003\u0002\u0002\u0002\u0367\u0363",
    "\u0003\u0002\u0002\u0002\u0367\u0365\u0003\u0002\u0002\u0002\u0368\u008f",
    "\u0003\u0002\u0002\u0002\u0369\u036b\u00072\u0002\u0002\u036a\u0369",
    "\u0003\u0002\u0002\u0002\u036a\u036b\u0003\u0002\u0002\u0002\u036b\u036c",
    "\u0003\u0002\u0002\u0002\u036c\u036d\u0005&\u0014\u0002\u036d\u036e",
    "\bI\u0001\u0002\u036e\u0091\u0003\u0002\u0002\u0002\u036f\u0372\u0007",
    "&\u0002\u0002\u0370\u0371\u0007\'\u0002\u0002\u0371\u0373\u0007(\u0002",
    "\u0002\u0372\u0370\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002",
    "\u0002\u0373\u0374\u0003\u0002\u0002\u0002\u0374\u0375\u0005\u0018\r",
    "\u0002\u0375\u0093\u0003\u0002\u0002\u0002\u0376\u0377\u00079\u0002",
    "\u0002\u0377\u037c\bK\u0001\u0002\u0378\u0379\u0005\u0096L\u0002\u0379",
    "\u037a\bK\u0001\u0002\u037a\u037c\u0003\u0002\u0002\u0002\u037b\u0376",
    "\u0003\u0002\u0002\u0002\u037b\u0378\u0003\u0002\u0002\u0002\u037c\u0095",
    "\u0003\u0002\u0002\u0002\u037d\u037e\u0007;\u0002\u0002\u037e\u0382",
    "\bL\u0001\u0002\u037f\u0380\u0007:\u0002\u0002\u0380\u0382\bL\u0001",
    "\u0002\u0381\u037d\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002",
    "\u0002\u0382\u0097\u0003\u0002\u0002\u0002\u0383\u0384\u0007@\u0002",
    "\u0002\u0384\u0385\bM\u0001\u0002\u0385\u0099\u0003\u0002\u0002\u0002",
    "c\u009d\u00a2\u00a7\u00aa\u00b2\u00c3\u00cd\u00d3\u00d8\u00e7\u00f1",
    "\u00fb\u0105\u010b\u0112\u011b\u0126\u012a\u0133\u013e\u0146\u014e\u0158",
    "\u015e\u0166\u016f\u0178\u0180\u0184\u018a\u0190\u0199\u01a1\u01a5\u01ab",
    "\u01b1\u01bc\u01c4\u01cc\u01cf\u01d7\u01e1\u01eb\u01f1\u01f9\u01ff\u0205",
    "\u020d\u0212\u021c\u0222\u022f\u0236\u0240\u0244\u024d\u0250\u0256\u025a",
    "\u0261\u0267\u026c\u0272\u0278\u027d\u0282\u0288\u0296\u02a0\u02a4\u02ad",
    "\u02c0\u02c8\u02d0\u02d4\u02db\u02de\u02e5\u02ee\u02f1\u02f8\u0301\u0304",
    "\u030b\u0317\u0329\u0331\u033f\u0347\u034f\u0355\u035d\u0367\u036a\u0372",
    "\u037b\u0381"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'='", "'('", "')'", "'.'", "'@'", "'{'", "'}'", 
                     "'|'", "';'", "'$'", "'+'", "'?'", "','", "'^'", "'['", 
                     "']'", "'-'", "'&'", "'//'", "'%'", "'^^'", null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, "'true'", 
                     "'false'", null, null, null, "'a'", null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     "'~'", "'*'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "KW_BASE", "KW_IMPORT", "KW_EXTERNAL", 
                      "KW_PREFIX", "KW_START", "KW_VIRTUAL", "KW_CLOSED", 
                      "KW_EXTRA", "KW_LITERAL", "KW_IRI", "KW_NONLITERAL", 
                      "KW_BNODE", "KW_AND", "KW_OR", "KW_ON", "KW_SHAPE", 
                      "KW_EXPRESSION", "KW_MININCLUSIVE", "KW_MINEXCLUSIVE", 
                      "KW_MAXINCLUSIVE", "KW_MAXEXCLUSIVE", "KW_LENGTH", 
                      "KW_MINLENGTH", "KW_MAXLENGTH", "KW_TOTALDIGITS", 
                      "KW_FRACTIONDIGITS", "KW_NOT", "KW_TRUE", "KW_FALSE", 
                      "PASS", "COMMENT", "CODE", "RDF_TYPE", "IRIREF", "PNAME_NS", 
                      "PNAME_LN", "ATPNAME_NS", "ATPNAME_LN", "REGEXP", 
                      "REGEXP_FLAGS", "BLANK_NODE_LABEL", "LANGTAG", "INTEGER", 
                      "DECIMAL", "DOUBLE", "STEM_MARK", "UNBOUNDED", "STRING_LITERAL1", 
                      "STRING_LITERAL2", "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2" ];

var ruleNames =  [ "shExDoc", "directive", "baseDecl", "prefixDecl", "importDecl", 
                   "notStartAction", "start", "startActions", "statement", 
                   "shapeExprDecl", "shapeExpression", "inlineShapeExpression", 
                   "shapeOr", "inlineShapeOr", "shapeAnd", "inlineShapeAnd", 
                   "shapeNot", "shapeAtom", "inlineShapeAtom", "shapeOrRef", 
                   "inlineShapeOrRef", "shapeRef", "inlineLitNodeConstraint", 
                   "litNodeConstraint", "inlineNonLitNodeConstraint", "nonLitNodeConstraint", 
                   "nonLiteralKind", "xsFacet", "stringFacet", "stringLength", 
                   "numericFacet", "numericRange", "numericLength", "rawNumeric", 
                   "shapeDefinition", "inlineShapeDefinition", "qualifier", 
                   "extraPropertySet", "tripleExpression", "oneOfTripleExpr", 
                   "multiElementOneOf", "groupTripleExpr", "singleElementGroup", 
                   "multiElementGroup", "unaryTripleExpr", "bracketedTripleExpr", 
                   "tripleConstraint", "cardinality", "repeatRange", "senseFlags", 
                   "valueSet", "valueSetValue", "iriRange", "iriExclusion", 
                   "literalRange", "literalExclusion", "languageRange", 
                   "languageExclusion", "include", "annotation", "semanticAction", 
                   "literal", "predicate", "rdfType", "datatype", "shapeExprLabel", 
                   "tripleExprLabel", "numericLiteral", "rdfLiteral", "booleanLiteral", 
                   "string", "inlineShapeNot", "onShapeExpr", "iri", "prefixedName", 
                   "blankNode" ];

function ShExDocParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ShExDocParser.prototype = Object.create(antlr4.Parser.prototype);
ShExDocParser.prototype.constructor = ShExDocParser;

Object.defineProperty(ShExDocParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ShExDocParser.EOF = antlr4.Token.EOF;
ShExDocParser.T__0 = 1;
ShExDocParser.T__1 = 2;
ShExDocParser.T__2 = 3;
ShExDocParser.T__3 = 4;
ShExDocParser.T__4 = 5;
ShExDocParser.T__5 = 6;
ShExDocParser.T__6 = 7;
ShExDocParser.T__7 = 8;
ShExDocParser.T__8 = 9;
ShExDocParser.T__9 = 10;
ShExDocParser.T__10 = 11;
ShExDocParser.T__11 = 12;
ShExDocParser.T__12 = 13;
ShExDocParser.T__13 = 14;
ShExDocParser.T__14 = 15;
ShExDocParser.T__15 = 16;
ShExDocParser.T__16 = 17;
ShExDocParser.T__17 = 18;
ShExDocParser.T__18 = 19;
ShExDocParser.T__19 = 20;
ShExDocParser.T__20 = 21;
ShExDocParser.KW_BASE = 22;
ShExDocParser.KW_IMPORT = 23;
ShExDocParser.KW_EXTERNAL = 24;
ShExDocParser.KW_PREFIX = 25;
ShExDocParser.KW_START = 26;
ShExDocParser.KW_VIRTUAL = 27;
ShExDocParser.KW_CLOSED = 28;
ShExDocParser.KW_EXTRA = 29;
ShExDocParser.KW_LITERAL = 30;
ShExDocParser.KW_IRI = 31;
ShExDocParser.KW_NONLITERAL = 32;
ShExDocParser.KW_BNODE = 33;
ShExDocParser.KW_AND = 34;
ShExDocParser.KW_OR = 35;
ShExDocParser.KW_ON = 36;
ShExDocParser.KW_SHAPE = 37;
ShExDocParser.KW_EXPRESSION = 38;
ShExDocParser.KW_MININCLUSIVE = 39;
ShExDocParser.KW_MINEXCLUSIVE = 40;
ShExDocParser.KW_MAXINCLUSIVE = 41;
ShExDocParser.KW_MAXEXCLUSIVE = 42;
ShExDocParser.KW_LENGTH = 43;
ShExDocParser.KW_MINLENGTH = 44;
ShExDocParser.KW_MAXLENGTH = 45;
ShExDocParser.KW_TOTALDIGITS = 46;
ShExDocParser.KW_FRACTIONDIGITS = 47;
ShExDocParser.KW_NOT = 48;
ShExDocParser.KW_TRUE = 49;
ShExDocParser.KW_FALSE = 50;
ShExDocParser.PASS = 51;
ShExDocParser.COMMENT = 52;
ShExDocParser.CODE = 53;
ShExDocParser.RDF_TYPE = 54;
ShExDocParser.IRIREF = 55;
ShExDocParser.PNAME_NS = 56;
ShExDocParser.PNAME_LN = 57;
ShExDocParser.ATPNAME_NS = 58;
ShExDocParser.ATPNAME_LN = 59;
ShExDocParser.REGEXP = 60;
ShExDocParser.REGEXP_FLAGS = 61;
ShExDocParser.BLANK_NODE_LABEL = 62;
ShExDocParser.LANGTAG = 63;
ShExDocParser.INTEGER = 64;
ShExDocParser.DECIMAL = 65;
ShExDocParser.DOUBLE = 66;
ShExDocParser.STEM_MARK = 67;
ShExDocParser.UNBOUNDED = 68;
ShExDocParser.STRING_LITERAL1 = 69;
ShExDocParser.STRING_LITERAL2 = 70;
ShExDocParser.STRING_LITERAL_LONG1 = 71;
ShExDocParser.STRING_LITERAL_LONG2 = 72;

ShExDocParser.RULE_shExDoc = 0;
ShExDocParser.RULE_directive = 1;
ShExDocParser.RULE_baseDecl = 2;
ShExDocParser.RULE_prefixDecl = 3;
ShExDocParser.RULE_importDecl = 4;
ShExDocParser.RULE_notStartAction = 5;
ShExDocParser.RULE_start = 6;
ShExDocParser.RULE_startActions = 7;
ShExDocParser.RULE_statement = 8;
ShExDocParser.RULE_shapeExprDecl = 9;
ShExDocParser.RULE_shapeExpression = 10;
ShExDocParser.RULE_inlineShapeExpression = 11;
ShExDocParser.RULE_shapeOr = 12;
ShExDocParser.RULE_inlineShapeOr = 13;
ShExDocParser.RULE_shapeAnd = 14;
ShExDocParser.RULE_inlineShapeAnd = 15;
ShExDocParser.RULE_shapeNot = 16;
ShExDocParser.RULE_shapeAtom = 17;
ShExDocParser.RULE_inlineShapeAtom = 18;
ShExDocParser.RULE_shapeOrRef = 19;
ShExDocParser.RULE_inlineShapeOrRef = 20;
ShExDocParser.RULE_shapeRef = 21;
ShExDocParser.RULE_inlineLitNodeConstraint = 22;
ShExDocParser.RULE_litNodeConstraint = 23;
ShExDocParser.RULE_inlineNonLitNodeConstraint = 24;
ShExDocParser.RULE_nonLitNodeConstraint = 25;
ShExDocParser.RULE_nonLiteralKind = 26;
ShExDocParser.RULE_xsFacet = 27;
ShExDocParser.RULE_stringFacet = 28;
ShExDocParser.RULE_stringLength = 29;
ShExDocParser.RULE_numericFacet = 30;
ShExDocParser.RULE_numericRange = 31;
ShExDocParser.RULE_numericLength = 32;
ShExDocParser.RULE_rawNumeric = 33;
ShExDocParser.RULE_shapeDefinition = 34;
ShExDocParser.RULE_inlineShapeDefinition = 35;
ShExDocParser.RULE_qualifier = 36;
ShExDocParser.RULE_extraPropertySet = 37;
ShExDocParser.RULE_tripleExpression = 38;
ShExDocParser.RULE_oneOfTripleExpr = 39;
ShExDocParser.RULE_multiElementOneOf = 40;
ShExDocParser.RULE_groupTripleExpr = 41;
ShExDocParser.RULE_singleElementGroup = 42;
ShExDocParser.RULE_multiElementGroup = 43;
ShExDocParser.RULE_unaryTripleExpr = 44;
ShExDocParser.RULE_bracketedTripleExpr = 45;
ShExDocParser.RULE_tripleConstraint = 46;
ShExDocParser.RULE_cardinality = 47;
ShExDocParser.RULE_repeatRange = 48;
ShExDocParser.RULE_senseFlags = 49;
ShExDocParser.RULE_valueSet = 50;
ShExDocParser.RULE_valueSetValue = 51;
ShExDocParser.RULE_iriRange = 52;
ShExDocParser.RULE_iriExclusion = 53;
ShExDocParser.RULE_literalRange = 54;
ShExDocParser.RULE_literalExclusion = 55;
ShExDocParser.RULE_languageRange = 56;
ShExDocParser.RULE_languageExclusion = 57;
ShExDocParser.RULE_include = 58;
ShExDocParser.RULE_annotation = 59;
ShExDocParser.RULE_semanticAction = 60;
ShExDocParser.RULE_literal = 61;
ShExDocParser.RULE_predicate = 62;
ShExDocParser.RULE_rdfType = 63;
ShExDocParser.RULE_datatype = 64;
ShExDocParser.RULE_shapeExprLabel = 65;
ShExDocParser.RULE_tripleExprLabel = 66;
ShExDocParser.RULE_numericLiteral = 67;
ShExDocParser.RULE_rdfLiteral = 68;
ShExDocParser.RULE_booleanLiteral = 69;
ShExDocParser.RULE_string = 70;
ShExDocParser.RULE_inlineShapeNot = 71;
ShExDocParser.RULE_onShapeExpr = 72;
ShExDocParser.RULE_iri = 73;
ShExDocParser.RULE_prefixedName = 74;
ShExDocParser.RULE_blankNode = 75;

function ShExDocContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shExDoc;
    return this;
}

ShExDocContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShExDocContext.prototype.constructor = ShExDocContext;

ShExDocContext.prototype.EOF = function() {
    return this.getToken(ShExDocParser.EOF, 0);
};

ShExDocContext.prototype.directive = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DirectiveContext);
    } else {
        return this.getTypedRuleContext(DirectiveContext,i);
    }
};

ShExDocContext.prototype.notStartAction = function() {
    return this.getTypedRuleContext(NotStartActionContext,0);
};

ShExDocContext.prototype.startActions = function() {
    return this.getTypedRuleContext(StartActionsContext,0);
};

ShExDocContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

ShExDocContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShExDoc(this);
	}
};

ShExDocContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShExDoc(this);
	}
};




ShExDocParser.ShExDocContext = ShExDocContext;

ShExDocParser.prototype.shExDoc = function() {

    var localctx = new ShExDocContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ShExDocParser.RULE_shExDoc);

      this.UNBOUNDED = -1;

      this.unescapeText = function (string, replacements) {
        var regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
        try {
          string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
            var charCode;
            if (unicode4) {
              charCode = parseInt(unicode4, 16);
              if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
              return String.fromCharCode(charCode);
            }
            else if (unicode8) {
              charCode = parseInt(unicode8, 16);
              if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
              if (charCode < 0xFFFF) return String.fromCharCode(charCode);
              return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
            }
            else {
              var replacement = replacements[escapedChar];
              if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
              return replacement;
            }
          });
          return string;
        }
        catch (error) { console.warn(error); return ''; }
      };

      // Common namespaces and entities
      this.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      this.RDF_TYPE  = this.RDF + 'type',
      this.RDF_FIRST = this.RDF + 'first',
      this.RDF_REST  = this.RDF + 'rest',
      this.RDF_NIL   = this.RDF + 'nil',
      this.XSD = 'http://www.w3.org/2001/XMLSchema#',
      this.XSD_INTEGER  = this.XSD + 'integer',
      this.XSD_DECIMAL  = this.XSD + 'decimal',
      this.XSD_FLOAT   = this.XSD + 'float',
      this.XSD_DOUBLE   = this.XSD + 'double',
      this.XSD_BOOLEAN  = this.XSD + 'boolean',
      this.XSD_TRUE =  '"true"^^'  + this.XSD_BOOLEAN,
      this.XSD_FALSE = '"false"^^' + this.XSD_BOOLEAN,
      this.XSD_PATTERN        = this.XSD + 'pattern',
      this.XSD_MININCLUSIVE   = this.XSD + 'minInclusive',
      this.XSD_MINEXCLUSIVE   = this.XSD + 'minExclusive',
      this.XSD_MAXINCLUSIVE   = this.XSD + 'maxInclusive',
      this.XSD_MAXEXCLUSIVE   = this.XSD + 'maxExclusive',
      this.XSD_LENGTH         = this.XSD + 'length',
      this.XSD_MINLENGTH      = this.XSD + 'minLength',
      this.XSD_MAXLENGTH      = this.XSD + 'maxLength',
      this.XSD_TOTALDIGITS    = this.XSD + 'totalDigits',
      this.XSD_FRACTIONDIGITS = this.XSD + 'fractionDigits';

      this.numericDatatypes = [
          this.XSD + "integer",
          this.XSD + "decimal",
          this.XSD + "float",
          this.XSD + "double",
          this.XSD + "string",
          this.XSD + "boolean",
          this.XSD + "dateTime",
          this.XSD + "nonPositiveInteger",
          this.XSD + "negativeInteger",
          this.XSD + "long",
          this.XSD + "int",
          this.XSD + "short",
          this.XSD + "byte",
          this.XSD + "nonNegativeInteger",
          this.XSD + "unsignedLong",
          this.XSD + "unsignedInt",
          this.XSD + "unsignedShort",
          this.XSD + "unsignedByte",
          this.XSD + "positiveInteger"
      ];

      this.absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
        schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
        dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

      this.numericFacets = ["mininclusive", "minexclusive",
                           "maxinclusive", "maxexclusive"];

      // Returns a lowercase version of the given string
      this.lowercase = function (string) {
        return string.toLowerCase();
      }

      // Appends the item to the array and returns the array
      function appendTo(array, item) {
        return array.push(item), array;
      }

      // Appends the items to the array and returns the array
      function appendAllTo(array, items) {
        return array.push.apply(array, items), array;
      }

      // Extends a base object with properties of other objects
      this.extend = function (base) {
        if (!base) base = {};
        for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
          for (var name in arg)
            base[name] = arg[name];
        return base;
      }

      // Creates an array that contains all items of the given arrays
      this.unionAll = function() {
        var union = [];
        for (var i = 0, l = arguments.length; i < l; i++)
          union = union.concat.apply(union, arguments[i]);
        return union;
      }

      // N3.js:lib/N3Parser.js<0.4.5>:58 with
      //   s/this\./this./g
      // ### `_setBase` sets the base IRI to resolve relative IRIs.
      this._setBase = function (baseIRI) {
        if (!baseIRI)
          baseIRI = null;

        // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
        // else if (baseIRI.indexOf('#') >= 0)
        //   throw new Error('Invalid base IRI ' + baseIRI);

        // Set base IRI and its components
        if (this._base = baseIRI) {
          this._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
          baseIRI = baseIRI.match(schemeAuthority);
          this._baseRoot   = baseIRI[0];
          this._baseScheme = baseIRI[1];
        }
      }

      // N3.js:lib/N3this.js<0.4.5>:576 with
      //   s/this\./this./g
      //   s/token/iri/
      // ### `_resolveIRI` resolves a relative IRI token against the base path,
      // assuming that a base path has been set and that the IRI is indeed relative.
      this._resolveIRI = function (iri) {
        switch (iri[0]) {
        // An empty relative IRI indicates the base IRI
        case undefined: return this._base;
        // Resolve relative fragment IRIs against the base IRI
        case '#': return this._base + iri;
        // Resolve relative query string IRIs by replacing the query string
        case '?': return this._base.replace(/(?:\?.*)?$/, iri);
        // Resolve root-relative IRIs at the root of the base IRI
        case '/':
          // Resolve scheme-relative IRIs to the scheme
          return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + _removeDotSegments(iri);
        // Resolve all other IRIs at the base IRI's path
        default: {
          return _removeDotSegments(this._basePath + iri);
        }
        }
      }

      // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
      function _removeDotSegments (iri) {
        // Don't modify the IRI if it does not contain any dot segments
        if (!dotSegments.test(iri))
          return iri;

        // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
        var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

        while (i < length) {
          switch (next) {
          // The path starts with the first slash after the authority
          case ':':
            if (pathStart < 0) {
              // Skip two slashes before the authority
              if (iri[++i] === '/' && iri[++i] === '/')
                // Skip to slash after the authority
                while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
                  i = pathStart;
            }
            break;
          // Don't modify a query string or fragment
          case '?':
          case '#':
            i = length;
            break;
          // Handle '/.' or '/..' path segments
          case '/':
            if (iri[i + 1] === '.') {
              next = iri[++i + 1];
              switch (next) {
              // Remove a '/.' segment
              case '/':
                result += iri.substring(segmentStart, i - 1);
                segmentStart = i + 1;
                break;
              // Remove a trailing '/.' segment
              case undefined:
              case '?':
              case '#':
                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
              // Remove a '/..' segment
              case '.':
                next = iri[++i + 1];
                if (next === undefined || next === '/' || next === '?' || next === '#') {
                  result += iri.substring(segmentStart, i - 2);
                  // Try to remove the parent path from result
                  if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                    result = result.substr(0, segmentStart);
                  // Remove a trailing '/..' segment
                  if (next !== '/')
                    return result + '/' + iri.substr(i + 1);
                  segmentStart = i + 1;
                }
              }
            }
          }
          next = iri[++i];
        }
        return result + iri.substring(segmentStart);
      }

      // Creates an expression with the given type and attributes
      function expression(expr, attr) {
        var expression = { expression: expr };
        if (attr)
          for (var a in attr)
            expression[a] = attr[a];
        return expression;
      }

      // Creates a path with the given type and items
      function path(type, items) {
        return { type: 'path', pathType: type, items: items };
      }

      // Creates a literal with the given value and type
      this.createLiteral = function (value, type) {
        return { value: value, type: type };
      }

      // Creates a new blank node identifier
      function blank() {
        return '_:b' + blankId++;
      };
      var blankId = 0;
      this._resetBlanks = function () { blankId = 0; }
      this._reset = function () {
        this._prefixes = this._imports = this.valueExprDefns = this._shapes = this.productions = this._start = this.startActs = null; // Reset state.
        this._base = this._baseIRI = this._baseIRIPath = this._baseIRIRoot = null;
      }
      var _fileName; // for debugging
      this._setFileName = function (fn) { _fileName = fn; }

      // Regular expression and replacement strings to escape strings
      this.stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                       't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' };
      this.semactEscapeReplacements = { '\\': '\\', '%': '%' };
      this.pnameEscapeReplacements = {
            '\\': '\\', "'": "'", '"': '"',
            'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
            '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
            '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
            '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
          };


      // Translates string escape codes in the string into their textual equivalent
      this.unescapeString = function (string, trimLength) {
        string = string.substring(trimLength, string.length - trimLength);
        return { value: this.unescapeText(string, this.stringEscapeReplacements) };
      }

      this.unescapeLangString = function (string, trimLength) {
        var at = string.lastIndexOf("@");
        var lang = string.substr(at);
        string = string.substr(0, at);
        var u = unescapeString(string, trimLength);
        return this.extend(u, { language: this.lowercase(lang.substr(1)) });
      }

      // Translates regular expression escape codes in the string into their textual equivalent
      this.unescapeRegexp = function (regexp) {
        var end = regexp.lastIndexOf("/");
        var s = regexp.substr(1, end-1);
        var regexpEscapeReplacements = {
          '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
          '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
          '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
          't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
        };
        s = this.unescapeText(s, regexpEscapeReplacements)
        var ret = {
          pattern: s
        };
        if (regexp.length > end+1)
          ret.flags = regexp.substr(end+1);
        return ret;
      }

      // Convenience function to return object with p1 key, value p2
      this.keyValObject = function (key, val) {
        var ret = {};
        ret[key] = val;
        return ret;
      }

      // Return object with p1 key, p2 string value
      this.unescapeSemanticAction = function (key, string) {
        string = string.substring(1, string.length - 2);
        return {
          type: "SemAct",
          name: key,
          code: this.unescapeText(string, this.semactEscapeReplacements)
        };
      }

      this.error = function (msg) {
        this._reset();
        throw new Error(msg);
      }

      // Expand declared prefix or throw Error
      this.expandPrefix = function (prefix) {
        if (!(prefix in this._prefixes))
          this.error('Parse error; unknown prefix: ' + prefix);
        return this._prefixes[prefix];
      }

      // Add a shape to the map
      this.addShape = function (label, shape) {
        if (this.productions && label in this.productions)
          this.error("Structural error: "+label+" is a shape");
        if (!this._shapes)
          this._shapes = [];
        // if (label in this.shapes) {
        //   if (this.options.duplicateShape === "replace")
        //     this.shapes[label] = shape;
        //   else if (this.options.duplicateShape !== "ignore")
        //     this.error("Parse error: "+label+" already defined");
        // } else
        shape.id = label
          this._shapes.push(shape);
      }

      // Add a production to the map
      this.addProduction = function (label, production) {
        if (this.shapes && label in this.shapes)
          this.error("Structural error: "+label+" is a shape");
        if (!this.productions)
          this.productions = {};
        if (label in this.productions) {
          if (this.options.duplicateShape === "replace")
            this.productions[label] = production;
          else if (this.options.duplicateShape !== "ignore")
            this.error("Parse error: "+label+" already defined");
        } else
          this.productions[label] = production;
      }

      this.shapeJunction = function (type, container, elts) {
        if (elts.length === 0) {
          return container;
        } else if (container.type === type) {
          container.shapeExprs = container.shapeExprs.concat(elts);
          return container;
        } else {
          return { type: type, shapeExprs: [container].concat(elts) };
        }
      }

      this.EmptyObject = {  };
      this.EmptyShape = { type: "Shape" };

      this.NC = function (l, r) {
        let facets = r.reduce((acc, p) => Object.assign(acc, p.$$), {})      
        return this.extend({ type: "NodeConstraint"}, l, facets)
      }

                this.$1 = function (ctx) {
                    ctx.$$ = ctx.children[1-1].$$;
                }
                this.$2 = function (ctx) {
                    ctx.$$ = ctx.children[2-1].$$;
                }

                this._prefixes = Object.create(null);
                this._imports = [];
                this._setBase('');
                this.url = require('url');
            
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 155;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.KW_BASE) | (1 << ShExDocParser.KW_IMPORT) | (1 << ShExDocParser.KW_PREFIX))) !== 0)) {
            this.state = 152;
            this.directive();
            this.state = 157;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 168;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.T__19 || _la===ShExDocParser.KW_START || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (ShExDocParser.IRIREF - 55)) | (1 << (ShExDocParser.PNAME_NS - 55)) | (1 << (ShExDocParser.PNAME_LN - 55)) | (1 << (ShExDocParser.BLANK_NODE_LABEL - 55)))) !== 0)) {
            this.state = 160;
            switch(this._input.LA(1)) {
            case ShExDocParser.KW_START:
            case ShExDocParser.IRIREF:
            case ShExDocParser.PNAME_NS:
            case ShExDocParser.PNAME_LN:
            case ShExDocParser.BLANK_NODE_LABEL:
                this.state = 158;
                this.notStartAction();
                break;
            case ShExDocParser.T__19:
                this.state = 159;
                this.startActions();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 165;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.KW_BASE) | (1 << ShExDocParser.KW_IMPORT) | (1 << ShExDocParser.KW_PREFIX) | (1 << ShExDocParser.KW_START))) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & ((1 << (ShExDocParser.IRIREF - 55)) | (1 << (ShExDocParser.PNAME_NS - 55)) | (1 << (ShExDocParser.PNAME_LN - 55)) | (1 << (ShExDocParser.BLANK_NODE_LABEL - 55)))) !== 0)) {
                this.state = 162;
                this.statement();
                this.state = 167;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 170;
        this.match(ShExDocParser.EOF);

                var valueExprDefns = this.valueExprDefns ? { valueExprDefns: this.valueExprDefns } : {};
                var startObj = this._start ? { start: this._start } : {};
                var startActs = this.startActs ? { startActs: this.startActs } : {};
                var ret = this.extend({ type: "Schema"},
                                 Object.keys(this._prefixes).length ? { prefixes: this._prefixes } : {}, // Properties ordered here to
                                 Object.keys(this._imports).length ? { imports: this._imports } : {}, // build return object from
                                 valueExprDefns, startActs, startObj,                  // components in parser state
                                 this._shapes ? {shapes: this._shapes} : {},         // maintaining intuitve order.
                                 this.productions ? {productions: this.productions} : {});
                if (this._base !== null)
                  ret.base = this._base;
                this._reset();
                localctx.$$ = ret;
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_directive;
    return this;
}

DirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectiveContext.prototype.constructor = DirectiveContext;

DirectiveContext.prototype.baseDecl = function() {
    return this.getTypedRuleContext(BaseDeclContext,0);
};

DirectiveContext.prototype.prefixDecl = function() {
    return this.getTypedRuleContext(PrefixDeclContext,0);
};

DirectiveContext.prototype.importDecl = function() {
    return this.getTypedRuleContext(ImportDeclContext,0);
};

DirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterDirective(this);
	}
};

DirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitDirective(this);
	}
};




ShExDocParser.DirectiveContext = DirectiveContext;

ShExDocParser.prototype.directive = function() {

    var localctx = new DirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ShExDocParser.RULE_directive);
    try {
        this.state = 176;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_BASE:
            this.enterOuterAlt(localctx, 1);
            this.state = 173;
            this.baseDecl();
            break;
        case ShExDocParser.KW_PREFIX:
            this.enterOuterAlt(localctx, 2);
            this.state = 174;
            this.prefixDecl();
            break;
        case ShExDocParser.KW_IMPORT:
            this.enterOuterAlt(localctx, 3);
            this.state = 175;
            this.importDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_baseDecl;
    return this;
}

BaseDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseDeclContext.prototype.constructor = BaseDeclContext;

BaseDeclContext.prototype.KW_BASE = function() {
    return this.getToken(ShExDocParser.KW_BASE, 0);
};

BaseDeclContext.prototype.IRIREF = function() {
    return this.getToken(ShExDocParser.IRIREF, 0);
};

BaseDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterBaseDecl(this);
	}
};

BaseDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitBaseDecl(this);
	}
};




ShExDocParser.BaseDeclContext = BaseDeclContext;

ShExDocParser.prototype.baseDecl = function() {

    var localctx = new BaseDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ShExDocParser.RULE_baseDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 178;
        this.match(ShExDocParser.KW_BASE);
        this.state = 179;
        this.match(ShExDocParser.IRIREF);

                    this._setBase(this._base === null ||
                            this.absoluteIRI.test(localctx.children[2-1].getText().slice(1, -1)) ? localctx.children[2-1].getText().slice(1, -1) : this._resolveIRI(localctx.children[2-1].getText().slice(1, -1)))
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_prefixDecl;
    return this;
}

PrefixDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixDeclContext.prototype.constructor = PrefixDeclContext;

PrefixDeclContext.prototype.KW_PREFIX = function() {
    return this.getToken(ShExDocParser.KW_PREFIX, 0);
};

PrefixDeclContext.prototype.PNAME_NS = function() {
    return this.getToken(ShExDocParser.PNAME_NS, 0);
};

PrefixDeclContext.prototype.IRIREF = function() {
    return this.getToken(ShExDocParser.IRIREF, 0);
};

PrefixDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterPrefixDecl(this);
	}
};

PrefixDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitPrefixDecl(this);
	}
};




ShExDocParser.PrefixDeclContext = PrefixDeclContext;

ShExDocParser.prototype.prefixDecl = function() {

    var localctx = new PrefixDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ShExDocParser.RULE_prefixDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 182;
        this.match(ShExDocParser.KW_PREFIX);
        this.state = 183;
        this.match(ShExDocParser.PNAME_NS);
        this.state = 184;
        this.match(ShExDocParser.IRIREF);
         // t: ShExParser-test.js/with pre-defined prefixes
                this._prefixes[localctx.children[2 - 1].getText().slice(0, -1)] = this._base === null ||
                            this.absoluteIRI.test(localctx.children[3-1].getText().slice(1, -1)) ? localctx.children[3-1].getText().slice(1, -1) : this._resolveIRI(localctx.children[3-1].getText().slice(1, -1));
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_importDecl;
    return this;
}

ImportDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclContext.prototype.constructor = ImportDeclContext;

ImportDeclContext.prototype.KW_IMPORT = function() {
    return this.getToken(ShExDocParser.KW_IMPORT, 0);
};

ImportDeclContext.prototype.IRIREF = function() {
    return this.getToken(ShExDocParser.IRIREF, 0);
};

ImportDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterImportDecl(this);
	}
};

ImportDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitImportDecl(this);
	}
};




ShExDocParser.ImportDeclContext = ImportDeclContext;

ShExDocParser.prototype.importDecl = function() {

    var localctx = new ImportDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ShExDocParser.RULE_importDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 187;
        this.match(ShExDocParser.KW_IMPORT);
        this.state = 188;
        this.match(ShExDocParser.IRIREF);

                this._imports.push(this._base === null ||
                            this.absoluteIRI.test(localctx.children[2-1].getText().slice(1, -1)) ? localctx.children[2-1].getText().slice(1, -1) : this._resolveIRI(localctx.children[2-1].getText().slice(1, -1)));
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotStartActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_notStartAction;
    return this;
}

NotStartActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotStartActionContext.prototype.constructor = NotStartActionContext;

NotStartActionContext.prototype.start = function() {
    return this.getTypedRuleContext(StartContext,0);
};

NotStartActionContext.prototype.shapeExprDecl = function() {
    return this.getTypedRuleContext(ShapeExprDeclContext,0);
};

NotStartActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNotStartAction(this);
	}
};

NotStartActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNotStartAction(this);
	}
};




ShExDocParser.NotStartActionContext = NotStartActionContext;

ShExDocParser.prototype.notStartAction = function() {

    var localctx = new NotStartActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ShExDocParser.RULE_notStartAction);
    try {
        this.state = 193;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_START:
            this.enterOuterAlt(localctx, 1);
            this.state = 191;
            this.start();
            break;
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
        case ShExDocParser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 2);
            this.state = 192;
            this.shapeExprDecl();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_start;
    return this;
}

StartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartContext.prototype.constructor = StartContext;

StartContext.prototype.KW_START = function() {
    return this.getToken(ShExDocParser.KW_START, 0);
};

StartContext.prototype.shapeExpression = function() {
    return this.getTypedRuleContext(ShapeExpressionContext,0);
};

StartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStart(this);
	}
};

StartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStart(this);
	}
};




ShExDocParser.StartContext = StartContext;

ShExDocParser.prototype.start = function() {

    var localctx = new StartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ShExDocParser.RULE_start);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 195;
        this.match(ShExDocParser.KW_START);
        this.state = 196;
        this.match(ShExDocParser.T__0);
        this.state = 197;
        this.shapeExpression();
         this._start = localctx.children[3-1].$$ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StartActionsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_startActions;
    return this;
}

StartActionsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StartActionsContext.prototype.constructor = StartActionsContext;

StartActionsContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

StartActionsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStartActions(this);
	}
};

StartActionsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStartActions(this);
	}
};




ShExDocParser.StartActionsContext = StartActionsContext;

ShExDocParser.prototype.startActions = function() {

    var localctx = new StartActionsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ShExDocParser.RULE_startActions);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 201; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 200;
            this.semanticAction();
            this.state = 203; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ShExDocParser.T__19);
         this.startActs = localctx.children.map(c => c.$$); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.directive = function() {
    return this.getTypedRuleContext(DirectiveContext,0);
};

StatementContext.prototype.notStartAction = function() {
    return this.getTypedRuleContext(NotStartActionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStatement(this);
	}
};




ShExDocParser.StatementContext = StatementContext;

ShExDocParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ShExDocParser.RULE_statement);
    try {
        this.state = 209;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_BASE:
        case ShExDocParser.KW_IMPORT:
        case ShExDocParser.KW_PREFIX:
            this.enterOuterAlt(localctx, 1);
            this.state = 207;
            this.directive();
            break;
        case ShExDocParser.KW_START:
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
        case ShExDocParser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 2);
            this.state = 208;
            this.notStartAction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeExprDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeExprDecl;
    return this;
}

ShapeExprDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeExprDeclContext.prototype.constructor = ShapeExprDeclContext;

ShapeExprDeclContext.prototype.shapeExprLabel = function() {
    return this.getTypedRuleContext(ShapeExprLabelContext,0);
};

ShapeExprDeclContext.prototype.shapeExpression = function() {
    return this.getTypedRuleContext(ShapeExpressionContext,0);
};

ShapeExprDeclContext.prototype.KW_EXTERNAL = function() {
    return this.getToken(ShExDocParser.KW_EXTERNAL, 0);
};

ShapeExprDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeExprDecl(this);
	}
};

ShapeExprDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeExprDecl(this);
	}
};




ShExDocParser.ShapeExprDeclContext = ShapeExprDeclContext;

ShExDocParser.prototype.shapeExprDecl = function() {

    var localctx = new ShapeExprDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ShExDocParser.RULE_shapeExprDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 211;
        this.shapeExprLabel();
        this.state = 214;
        switch(this._input.LA(1)) {
        case ShExDocParser.T__1:
        case ShExDocParser.T__3:
        case ShExDocParser.T__4:
        case ShExDocParser.T__5:
        case ShExDocParser.T__14:
        case ShExDocParser.KW_CLOSED:
        case ShExDocParser.KW_EXTRA:
        case ShExDocParser.KW_LITERAL:
        case ShExDocParser.KW_IRI:
        case ShExDocParser.KW_NONLITERAL:
        case ShExDocParser.KW_BNODE:
        case ShExDocParser.KW_MININCLUSIVE:
        case ShExDocParser.KW_MINEXCLUSIVE:
        case ShExDocParser.KW_MAXINCLUSIVE:
        case ShExDocParser.KW_MAXEXCLUSIVE:
        case ShExDocParser.KW_LENGTH:
        case ShExDocParser.KW_MINLENGTH:
        case ShExDocParser.KW_MAXLENGTH:
        case ShExDocParser.KW_TOTALDIGITS:
        case ShExDocParser.KW_FRACTIONDIGITS:
        case ShExDocParser.KW_NOT:
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
        case ShExDocParser.ATPNAME_NS:
        case ShExDocParser.ATPNAME_LN:
        case ShExDocParser.REGEXP:
            this.state = 212;
            this.shapeExpression();
            break;
        case ShExDocParser.KW_EXTERNAL:
            this.state = 213;
            this.match(ShExDocParser.KW_EXTERNAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         // t: 1dot 1val1vsMinusiri3??
                this.addShape(localctx.children[0].$$, localctx.KW_EXTERNAL() ? { type: "ShapeExternal" } : localctx.shapeExpression().$$);
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeExpression;
    return this;
}

ShapeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeExpressionContext.prototype.constructor = ShapeExpressionContext;

ShapeExpressionContext.prototype.shapeOr = function() {
    return this.getTypedRuleContext(ShapeOrContext,0);
};

ShapeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeExpression(this);
	}
};

ShapeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeExpression(this);
	}
};




ShExDocParser.ShapeExpressionContext = ShapeExpressionContext;

ShExDocParser.prototype.shapeExpression = function() {

    var localctx = new ShapeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ShExDocParser.RULE_shapeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 218;
        this.shapeOr();
         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeExpression;
    return this;
}

InlineShapeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeExpressionContext.prototype.constructor = InlineShapeExpressionContext;

InlineShapeExpressionContext.prototype.inlineShapeOr = function() {
    return this.getTypedRuleContext(InlineShapeOrContext,0);
};

InlineShapeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeExpression(this);
	}
};

InlineShapeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeExpression(this);
	}
};




ShExDocParser.InlineShapeExpressionContext = InlineShapeExpressionContext;

ShExDocParser.prototype.inlineShapeExpression = function() {

    var localctx = new InlineShapeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ShExDocParser.RULE_inlineShapeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 221;
        this.inlineShapeOr();
         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeOr;
    return this;
}

ShapeOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeOrContext.prototype.constructor = ShapeOrContext;

ShapeOrContext.prototype.shapeAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ShapeAndContext);
    } else {
        return this.getTypedRuleContext(ShapeAndContext,i);
    }
};

ShapeOrContext.prototype.KW_OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ShExDocParser.KW_OR);
    } else {
        return this.getToken(ShExDocParser.KW_OR, i);
    }
};


ShapeOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeOr(this);
	}
};

ShapeOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeOr(this);
	}
};




ShExDocParser.ShapeOrContext = ShapeOrContext;

ShExDocParser.prototype.shapeOr = function() {

    var localctx = new ShapeOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ShExDocParser.RULE_shapeOr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 224;
        this.shapeAnd();
        this.state = 229;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.KW_OR) {
            this.state = 225;
            this.match(ShExDocParser.KW_OR);
            this.state = 226;
            this.shapeAnd();
            this.state = 231;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         localctx.$$ = localctx.shapeAnd().length == 1 ? localctx.shapeAnd()[0].$$ : { type: "ShapeOr", shapeExprs: localctx.shapeAnd().map(c => c.$$) };  
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeOrContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeOr;
    return this;
}

InlineShapeOrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeOrContext.prototype.constructor = InlineShapeOrContext;

InlineShapeOrContext.prototype.inlineShapeAnd = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InlineShapeAndContext);
    } else {
        return this.getTypedRuleContext(InlineShapeAndContext,i);
    }
};

InlineShapeOrContext.prototype.KW_OR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ShExDocParser.KW_OR);
    } else {
        return this.getToken(ShExDocParser.KW_OR, i);
    }
};


InlineShapeOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeOr(this);
	}
};

InlineShapeOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeOr(this);
	}
};




ShExDocParser.InlineShapeOrContext = InlineShapeOrContext;

ShExDocParser.prototype.inlineShapeOr = function() {

    var localctx = new InlineShapeOrContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ShExDocParser.RULE_inlineShapeOr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 234;
        this.inlineShapeAnd();
        this.state = 239;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.KW_OR) {
            this.state = 235;
            this.match(ShExDocParser.KW_OR);
            this.state = 236;
            this.inlineShapeAnd();
            this.state = 241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         localctx.$$ = localctx.inlineShapeAnd().length == 1 ? localctx.inlineShapeAnd()[0].$$ : { type: "ShapeOr", shapeExprs: localctx.inlineShapeAnd().map(c => c.$$) }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeAnd;
    return this;
}

ShapeAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeAndContext.prototype.constructor = ShapeAndContext;

ShapeAndContext.prototype.shapeNot = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ShapeNotContext);
    } else {
        return this.getTypedRuleContext(ShapeNotContext,i);
    }
};

ShapeAndContext.prototype.KW_AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ShExDocParser.KW_AND);
    } else {
        return this.getToken(ShExDocParser.KW_AND, i);
    }
};


ShapeAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAnd(this);
	}
};

ShapeAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAnd(this);
	}
};




ShExDocParser.ShapeAndContext = ShapeAndContext;

ShExDocParser.prototype.shapeAnd = function() {

    var localctx = new ShapeAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ShExDocParser.RULE_shapeAnd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 244;
        this.shapeNot();
        this.state = 249;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.KW_AND) {
            this.state = 245;
            this.match(ShExDocParser.KW_AND);
            this.state = 246;
            this.shapeNot();
            this.state = 251;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         localctx.$$ = localctx.shapeNot().length == 1 ? localctx.shapeNot()[0].$$ : { type: "ShapeAnd", shapeExprs: localctx.shapeNot().map(c => c.$$) }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeAndContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeAnd;
    return this;
}

InlineShapeAndContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeAndContext.prototype.constructor = InlineShapeAndContext;

InlineShapeAndContext.prototype.inlineShapeNot = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InlineShapeNotContext);
    } else {
        return this.getTypedRuleContext(InlineShapeNotContext,i);
    }
};

InlineShapeAndContext.prototype.KW_AND = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ShExDocParser.KW_AND);
    } else {
        return this.getToken(ShExDocParser.KW_AND, i);
    }
};


InlineShapeAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAnd(this);
	}
};

InlineShapeAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAnd(this);
	}
};




ShExDocParser.InlineShapeAndContext = InlineShapeAndContext;

ShExDocParser.prototype.inlineShapeAnd = function() {

    var localctx = new InlineShapeAndContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ShExDocParser.RULE_inlineShapeAnd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.inlineShapeNot();
        this.state = 259;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.KW_AND) {
            this.state = 255;
            this.match(ShExDocParser.KW_AND);
            this.state = 256;
            this.inlineShapeNot();
            this.state = 261;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         localctx.$$ = localctx.inlineShapeNot().length == 1 ? localctx.inlineShapeNot()[0].$$ : { type: "ShapeAnd", shapeExprs: localctx.inlineShapeNot().map(c => c.$$) }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeNotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeNot;
    return this;
}

ShapeNotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeNotContext.prototype.constructor = ShapeNotContext;

ShapeNotContext.prototype.shapeAtom = function() {
    return this.getTypedRuleContext(ShapeAtomContext,0);
};

ShapeNotContext.prototype.KW_NOT = function() {
    return this.getToken(ShExDocParser.KW_NOT, 0);
};

ShapeNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeNot(this);
	}
};

ShapeNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeNot(this);
	}
};




ShExDocParser.ShapeNotContext = ShapeNotContext;

ShExDocParser.prototype.shapeNot = function() {

    var localctx = new ShapeNotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ShExDocParser.RULE_shapeNot);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 265;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.KW_NOT) {
            this.state = 264;
            this.match(ShExDocParser.KW_NOT);
        }

        this.state = 267;
        this.shapeAtom();
         localctx.$$ = localctx.KW_NOT() ? { type: "ShapeNot", "shapeExpr": localctx.shapeAtom().$$ } : localctx.shapeAtom().$$; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeAtom;
    return this;
}

ShapeAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeAtomContext.prototype.constructor = ShapeAtomContext;


 
ShapeAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ShapeAtomShapeOrRefContext(parser, ctx) {
	ShapeAtomContext.call(this, parser);
    ShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShapeAtomShapeOrRefContext.prototype = Object.create(ShapeAtomContext.prototype);
ShapeAtomShapeOrRefContext.prototype.constructor = ShapeAtomShapeOrRefContext;

ShExDocParser.ShapeAtomShapeOrRefContext = ShapeAtomShapeOrRefContext;

ShapeAtomShapeOrRefContext.prototype.shapeOrRef = function() {
    return this.getTypedRuleContext(ShapeOrRefContext,0);
};

ShapeAtomShapeOrRefContext.prototype.nonLitNodeConstraint = function() {
    return this.getTypedRuleContext(NonLitNodeConstraintContext,0);
};
ShapeAtomShapeOrRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAtomShapeOrRef(this);
	}
};

ShapeAtomShapeOrRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAtomShapeOrRef(this);
	}
};


function ShapeAtomNonLitNodeConstraintContext(parser, ctx) {
	ShapeAtomContext.call(this, parser);
    ShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShapeAtomNonLitNodeConstraintContext.prototype = Object.create(ShapeAtomContext.prototype);
ShapeAtomNonLitNodeConstraintContext.prototype.constructor = ShapeAtomNonLitNodeConstraintContext;

ShExDocParser.ShapeAtomNonLitNodeConstraintContext = ShapeAtomNonLitNodeConstraintContext;

ShapeAtomNonLitNodeConstraintContext.prototype.nonLitNodeConstraint = function() {
    return this.getTypedRuleContext(NonLitNodeConstraintContext,0);
};

ShapeAtomNonLitNodeConstraintContext.prototype.shapeOrRef = function() {
    return this.getTypedRuleContext(ShapeOrRefContext,0);
};
ShapeAtomNonLitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAtomNonLitNodeConstraint(this);
	}
};

ShapeAtomNonLitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAtomNonLitNodeConstraint(this);
	}
};


function ShapeAtomLitNodeConstraintContext(parser, ctx) {
	ShapeAtomContext.call(this, parser);
    ShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShapeAtomLitNodeConstraintContext.prototype = Object.create(ShapeAtomContext.prototype);
ShapeAtomLitNodeConstraintContext.prototype.constructor = ShapeAtomLitNodeConstraintContext;

ShExDocParser.ShapeAtomLitNodeConstraintContext = ShapeAtomLitNodeConstraintContext;

ShapeAtomLitNodeConstraintContext.prototype.litNodeConstraint = function() {
    return this.getTypedRuleContext(LitNodeConstraintContext,0);
};
ShapeAtomLitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAtomLitNodeConstraint(this);
	}
};

ShapeAtomLitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAtomLitNodeConstraint(this);
	}
};


function ShapeAtomShapeExpressionContext(parser, ctx) {
	ShapeAtomContext.call(this, parser);
    ShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShapeAtomShapeExpressionContext.prototype = Object.create(ShapeAtomContext.prototype);
ShapeAtomShapeExpressionContext.prototype.constructor = ShapeAtomShapeExpressionContext;

ShExDocParser.ShapeAtomShapeExpressionContext = ShapeAtomShapeExpressionContext;

ShapeAtomShapeExpressionContext.prototype.shapeExpression = function() {
    return this.getTypedRuleContext(ShapeExpressionContext,0);
};
ShapeAtomShapeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAtomShapeExpression(this);
	}
};

ShapeAtomShapeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAtomShapeExpression(this);
	}
};


function ShapeAtomAnyContext(parser, ctx) {
	ShapeAtomContext.call(this, parser);
    ShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShapeAtomAnyContext.prototype = Object.create(ShapeAtomContext.prototype);
ShapeAtomAnyContext.prototype.constructor = ShapeAtomAnyContext;

ShExDocParser.ShapeAtomAnyContext = ShapeAtomAnyContext;

ShapeAtomAnyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeAtomAny(this);
	}
};

ShapeAtomAnyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeAtomAny(this);
	}
};



ShExDocParser.ShapeAtomContext = ShapeAtomContext;

ShExDocParser.prototype.shapeAtom = function() {

    var localctx = new ShapeAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ShExDocParser.RULE_shapeAtom);
    var _la = 0; // Token type
    try {
        this.state = 292;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ShapeAtomNonLitNodeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 270;
            this.nonLitNodeConstraint();
            this.state = 272;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.T__4) | (1 << ShExDocParser.T__5) | (1 << ShExDocParser.KW_CLOSED) | (1 << ShExDocParser.KW_EXTRA))) !== 0) || _la===ShExDocParser.ATPNAME_NS || _la===ShExDocParser.ATPNAME_LN) {
                this.state = 271;
                this.shapeOrRef();
            }


                    localctx.$$ = localctx.children[2-1] ? { type: "ShapeAnd", shapeExprs: [ this.extend({ type: "NodeConstraint" }, localctx.children[1-1].$$), localctx.children[2-1].$$ ] } : localctx.children[1-1].$$
                  
            break;

        case 2:
            localctx = new ShapeAtomLitNodeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 276;
            this.litNodeConstraint();
             this.$1(localctx); 
            break;

        case 3:
            localctx = new ShapeAtomShapeOrRefContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 279;
            this.shapeOrRef();
            this.state = 281;
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (ShExDocParser.KW_IRI - 31)) | (1 << (ShExDocParser.KW_NONLITERAL - 31)) | (1 << (ShExDocParser.KW_BNODE - 31)) | (1 << (ShExDocParser.KW_LENGTH - 31)) | (1 << (ShExDocParser.KW_MINLENGTH - 31)) | (1 << (ShExDocParser.KW_MAXLENGTH - 31)) | (1 << (ShExDocParser.REGEXP - 31)))) !== 0)) {
                this.state = 280;
                this.nonLitNodeConstraint();
            }


                    localctx.$$ = localctx.children[2-1] ? this.shapeJunction("ShapeAnd", localctx.children[1-1].$$, localctx.children[2-1].$$) /* t: 1dotRef1 */ : localctx.children[1-1].$$ // t:@@
                  
            break;

        case 4:
            localctx = new ShapeAtomShapeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 285;
            this.match(ShExDocParser.T__1);
            this.state = 286;
            this.shapeExpression();
            this.state = 287;
            this.match(ShExDocParser.T__2);
             this.$2(localctx); 
            break;

        case 5:
            localctx = new ShapeAtomAnyContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 290;
            this.match(ShExDocParser.T__3);
             localctx.$$ = this.EmptyShape; 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeAtomContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeAtom;
    return this;
}

InlineShapeAtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeAtomContext.prototype.constructor = InlineShapeAtomContext;


 
InlineShapeAtomContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function InlineShapeAtomShapeExpressionContext(parser, ctx) {
	InlineShapeAtomContext.call(this, parser);
    InlineShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineShapeAtomShapeExpressionContext.prototype = Object.create(InlineShapeAtomContext.prototype);
InlineShapeAtomShapeExpressionContext.prototype.constructor = InlineShapeAtomShapeExpressionContext;

ShExDocParser.InlineShapeAtomShapeExpressionContext = InlineShapeAtomShapeExpressionContext;

InlineShapeAtomShapeExpressionContext.prototype.shapeExpression = function() {
    return this.getTypedRuleContext(ShapeExpressionContext,0);
};
InlineShapeAtomShapeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAtomShapeExpression(this);
	}
};

InlineShapeAtomShapeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAtomShapeExpression(this);
	}
};


function InlineShapeAtomLitNodeConstraintContext(parser, ctx) {
	InlineShapeAtomContext.call(this, parser);
    InlineShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineShapeAtomLitNodeConstraintContext.prototype = Object.create(InlineShapeAtomContext.prototype);
InlineShapeAtomLitNodeConstraintContext.prototype.constructor = InlineShapeAtomLitNodeConstraintContext;

ShExDocParser.InlineShapeAtomLitNodeConstraintContext = InlineShapeAtomLitNodeConstraintContext;

InlineShapeAtomLitNodeConstraintContext.prototype.inlineLitNodeConstraint = function() {
    return this.getTypedRuleContext(InlineLitNodeConstraintContext,0);
};
InlineShapeAtomLitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAtomLitNodeConstraint(this);
	}
};

InlineShapeAtomLitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAtomLitNodeConstraint(this);
	}
};


function InlineShapeAtomShapeOrRefContext(parser, ctx) {
	InlineShapeAtomContext.call(this, parser);
    InlineShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineShapeAtomShapeOrRefContext.prototype = Object.create(InlineShapeAtomContext.prototype);
InlineShapeAtomShapeOrRefContext.prototype.constructor = InlineShapeAtomShapeOrRefContext;

ShExDocParser.InlineShapeAtomShapeOrRefContext = InlineShapeAtomShapeOrRefContext;

InlineShapeAtomShapeOrRefContext.prototype.inlineShapeOrRef = function() {
    return this.getTypedRuleContext(InlineShapeOrRefContext,0);
};

InlineShapeAtomShapeOrRefContext.prototype.inlineNonLitNodeConstraint = function() {
    return this.getTypedRuleContext(InlineNonLitNodeConstraintContext,0);
};
InlineShapeAtomShapeOrRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAtomShapeOrRef(this);
	}
};

InlineShapeAtomShapeOrRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAtomShapeOrRef(this);
	}
};


function InlineShapeAtomAnyContext(parser, ctx) {
	InlineShapeAtomContext.call(this, parser);
    InlineShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineShapeAtomAnyContext.prototype = Object.create(InlineShapeAtomContext.prototype);
InlineShapeAtomAnyContext.prototype.constructor = InlineShapeAtomAnyContext;

ShExDocParser.InlineShapeAtomAnyContext = InlineShapeAtomAnyContext;

InlineShapeAtomAnyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAtomAny(this);
	}
};

InlineShapeAtomAnyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAtomAny(this);
	}
};


function InlineShapeAtomNonLitNodeConstraintContext(parser, ctx) {
	InlineShapeAtomContext.call(this, parser);
    InlineShapeAtomContext.prototype.copyFrom.call(this, ctx);
    return this;
}

InlineShapeAtomNonLitNodeConstraintContext.prototype = Object.create(InlineShapeAtomContext.prototype);
InlineShapeAtomNonLitNodeConstraintContext.prototype.constructor = InlineShapeAtomNonLitNodeConstraintContext;

ShExDocParser.InlineShapeAtomNonLitNodeConstraintContext = InlineShapeAtomNonLitNodeConstraintContext;

InlineShapeAtomNonLitNodeConstraintContext.prototype.inlineNonLitNodeConstraint = function() {
    return this.getTypedRuleContext(InlineNonLitNodeConstraintContext,0);
};

InlineShapeAtomNonLitNodeConstraintContext.prototype.inlineShapeOrRef = function() {
    return this.getTypedRuleContext(InlineShapeOrRefContext,0);
};
InlineShapeAtomNonLitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeAtomNonLitNodeConstraint(this);
	}
};

InlineShapeAtomNonLitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeAtomNonLitNodeConstraint(this);
	}
};



ShExDocParser.InlineShapeAtomContext = InlineShapeAtomContext;

ShExDocParser.prototype.inlineShapeAtom = function() {

    var localctx = new InlineShapeAtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ShExDocParser.RULE_inlineShapeAtom);
    var _la = 0; // Token type
    try {
        this.state = 316;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            localctx = new InlineShapeAtomNonLitNodeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 294;
            this.inlineNonLitNodeConstraint();
            this.state = 296;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
            if(la_===1) {
                this.state = 295;
                this.inlineShapeOrRef();

            }

                    localctx.$$ = localctx.children[2-1] ? { type: "ShapeAnd", shapeExprs: [ this.extend({ type: "NodeConstraint" }, localctx.children[1-1].$$), localctx.children[2-1].$$ ] } : localctx.children[1-1].$$
                  
            break;

        case 2:
            localctx = new InlineShapeAtomLitNodeConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 300;
            this.inlineLitNodeConstraint();
             this.$1(localctx); 
            break;

        case 3:
            localctx = new InlineShapeAtomShapeOrRefContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 303;
            this.inlineShapeOrRef();
            this.state = 305;
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (ShExDocParser.KW_IRI - 31)) | (1 << (ShExDocParser.KW_NONLITERAL - 31)) | (1 << (ShExDocParser.KW_BNODE - 31)) | (1 << (ShExDocParser.KW_LENGTH - 31)) | (1 << (ShExDocParser.KW_MINLENGTH - 31)) | (1 << (ShExDocParser.KW_MAXLENGTH - 31)) | (1 << (ShExDocParser.REGEXP - 31)))) !== 0)) {
                this.state = 304;
                this.inlineNonLitNodeConstraint();
            }


                    localctx.$$ = localctx.children[2-1] ? this.shapeJunction("ShapeAnd", localctx.children[1-1].$$, localctx.children[2-1].$$) /* t: 1dotRef1 */ : localctx.children[1-1].$$ // t:@@
                  
            break;

        case 4:
            localctx = new InlineShapeAtomShapeExpressionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 309;
            this.match(ShExDocParser.T__1);
            this.state = 310;
            this.shapeExpression();
            this.state = 311;
            this.match(ShExDocParser.T__2);
             this.$2(localctx); 
            break;

        case 5:
            localctx = new InlineShapeAtomAnyContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 314;
            this.match(ShExDocParser.T__3);
             localctx.$$ = this.EmptyShape; 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeOrRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeOrRef;
    return this;
}

ShapeOrRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeOrRefContext.prototype.constructor = ShapeOrRefContext;

ShapeOrRefContext.prototype.shapeDefinition = function() {
    return this.getTypedRuleContext(ShapeDefinitionContext,0);
};

ShapeOrRefContext.prototype.shapeRef = function() {
    return this.getTypedRuleContext(ShapeRefContext,0);
};

ShapeOrRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeOrRef(this);
	}
};

ShapeOrRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeOrRef(this);
	}
};




ShExDocParser.ShapeOrRefContext = ShapeOrRefContext;

ShExDocParser.prototype.shapeOrRef = function() {

    var localctx = new ShapeOrRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ShExDocParser.RULE_shapeOrRef);
    try {
        this.state = 324;
        switch(this._input.LA(1)) {
        case ShExDocParser.T__5:
        case ShExDocParser.KW_CLOSED:
        case ShExDocParser.KW_EXTRA:
            this.enterOuterAlt(localctx, 1);
            this.state = 318;
            this.shapeDefinition();
             this.$1(localctx); 
            break;
        case ShExDocParser.T__4:
        case ShExDocParser.ATPNAME_NS:
        case ShExDocParser.ATPNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 321;
            this.shapeRef();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeOrRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeOrRef;
    return this;
}

InlineShapeOrRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeOrRefContext.prototype.constructor = InlineShapeOrRefContext;

InlineShapeOrRefContext.prototype.inlineShapeDefinition = function() {
    return this.getTypedRuleContext(InlineShapeDefinitionContext,0);
};

InlineShapeOrRefContext.prototype.shapeRef = function() {
    return this.getTypedRuleContext(ShapeRefContext,0);
};

InlineShapeOrRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeOrRef(this);
	}
};

InlineShapeOrRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeOrRef(this);
	}
};




ShExDocParser.InlineShapeOrRefContext = InlineShapeOrRefContext;

ShExDocParser.prototype.inlineShapeOrRef = function() {

    var localctx = new InlineShapeOrRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ShExDocParser.RULE_inlineShapeOrRef);
    try {
        this.state = 332;
        switch(this._input.LA(1)) {
        case ShExDocParser.T__5:
        case ShExDocParser.KW_CLOSED:
        case ShExDocParser.KW_EXTRA:
            this.enterOuterAlt(localctx, 1);
            this.state = 326;
            this.inlineShapeDefinition();
             this.$1(localctx); 
            break;
        case ShExDocParser.T__4:
        case ShExDocParser.ATPNAME_NS:
        case ShExDocParser.ATPNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 329;
            this.shapeRef();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeRef;
    return this;
}

ShapeRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeRefContext.prototype.constructor = ShapeRefContext;

ShapeRefContext.prototype.ATPNAME_LN = function() {
    return this.getToken(ShExDocParser.ATPNAME_LN, 0);
};

ShapeRefContext.prototype.ATPNAME_NS = function() {
    return this.getToken(ShExDocParser.ATPNAME_NS, 0);
};

ShapeRefContext.prototype.shapeExprLabel = function() {
    return this.getTypedRuleContext(ShapeExprLabelContext,0);
};

ShapeRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeRef(this);
	}
};

ShapeRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeRef(this);
	}
};




ShExDocParser.ShapeRefContext = ShapeRefContext;

ShExDocParser.prototype.shapeRef = function() {

    var localctx = new ShapeRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ShExDocParser.RULE_shapeRef);
    try {
        this.state = 342;
        switch(this._input.LA(1)) {
        case ShExDocParser.ATPNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 334;
            this.match(ShExDocParser.ATPNAME_LN);
             // t: 1dotRefLNex@@
                    let ln = localctx.children[1-1].getText();
                    ln = ln.substr(1, ln.length-1);
                    var namePos = ln.indexOf(':');
                    localctx.$$ = this.expandPrefix(ln.substr(0, namePos)) + ln.substr(namePos + 1);
                  
            break;
        case ShExDocParser.ATPNAME_NS:
            this.enterOuterAlt(localctx, 2);
            this.state = 336;
            this.match(ShExDocParser.ATPNAME_NS);
             // t: 1dotRefNS1@@
                    let ns = localctx.children[1-1].getText();
                    ns = ns.substr(1, ns.length-1);
                    localctx.$$ = this.expandPrefix(ns.substr(0, ns.length - 1));
                  
            break;
        case ShExDocParser.T__4:
            this.enterOuterAlt(localctx, 3);
            this.state = 338;
            this.match(ShExDocParser.T__4);
            this.state = 339;
            this.shapeExprLabel();
             localctx.$$ = localctx.children[2-1].$$; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineLitNodeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineLitNodeConstraint;
    return this;
}

InlineLitNodeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineLitNodeConstraintContext.prototype.constructor = InlineLitNodeConstraintContext;


 
InlineLitNodeConstraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function NodeConstraintNumericFacetContext(parser, ctx) {
	InlineLitNodeConstraintContext.call(this, parser);
    InlineLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NodeConstraintNumericFacetContext.prototype = Object.create(InlineLitNodeConstraintContext.prototype);
NodeConstraintNumericFacetContext.prototype.constructor = NodeConstraintNumericFacetContext;

ShExDocParser.NodeConstraintNumericFacetContext = NodeConstraintNumericFacetContext;

NodeConstraintNumericFacetContext.prototype.numericFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumericFacetContext);
    } else {
        return this.getTypedRuleContext(NumericFacetContext,i);
    }
};
NodeConstraintNumericFacetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNodeConstraintNumericFacet(this);
	}
};

NodeConstraintNumericFacetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNodeConstraintNumericFacet(this);
	}
};


function NodeConstraintLiteralContext(parser, ctx) {
	InlineLitNodeConstraintContext.call(this, parser);
    InlineLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NodeConstraintLiteralContext.prototype = Object.create(InlineLitNodeConstraintContext.prototype);
NodeConstraintLiteralContext.prototype.constructor = NodeConstraintLiteralContext;

ShExDocParser.NodeConstraintLiteralContext = NodeConstraintLiteralContext;

NodeConstraintLiteralContext.prototype.KW_LITERAL = function() {
    return this.getToken(ShExDocParser.KW_LITERAL, 0);
};

NodeConstraintLiteralContext.prototype.xsFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XsFacetContext);
    } else {
        return this.getTypedRuleContext(XsFacetContext,i);
    }
};
NodeConstraintLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNodeConstraintLiteral(this);
	}
};

NodeConstraintLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNodeConstraintLiteral(this);
	}
};


function NodeConstraintNonLiteralContext(parser, ctx) {
	InlineLitNodeConstraintContext.call(this, parser);
    InlineLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NodeConstraintNonLiteralContext.prototype = Object.create(InlineLitNodeConstraintContext.prototype);
NodeConstraintNonLiteralContext.prototype.constructor = NodeConstraintNonLiteralContext;

ShExDocParser.NodeConstraintNonLiteralContext = NodeConstraintNonLiteralContext;

NodeConstraintNonLiteralContext.prototype.nonLiteralKind = function() {
    return this.getTypedRuleContext(NonLiteralKindContext,0);
};

NodeConstraintNonLiteralContext.prototype.stringFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringFacetContext);
    } else {
        return this.getTypedRuleContext(StringFacetContext,i);
    }
};
NodeConstraintNonLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNodeConstraintNonLiteral(this);
	}
};

NodeConstraintNonLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNodeConstraintNonLiteral(this);
	}
};


function NodeConstraintDatatypeContext(parser, ctx) {
	InlineLitNodeConstraintContext.call(this, parser);
    InlineLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NodeConstraintDatatypeContext.prototype = Object.create(InlineLitNodeConstraintContext.prototype);
NodeConstraintDatatypeContext.prototype.constructor = NodeConstraintDatatypeContext;

ShExDocParser.NodeConstraintDatatypeContext = NodeConstraintDatatypeContext;

NodeConstraintDatatypeContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

NodeConstraintDatatypeContext.prototype.xsFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XsFacetContext);
    } else {
        return this.getTypedRuleContext(XsFacetContext,i);
    }
};
NodeConstraintDatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNodeConstraintDatatype(this);
	}
};

NodeConstraintDatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNodeConstraintDatatype(this);
	}
};


function NodeConstraintValueSetContext(parser, ctx) {
	InlineLitNodeConstraintContext.call(this, parser);
    InlineLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

NodeConstraintValueSetContext.prototype = Object.create(InlineLitNodeConstraintContext.prototype);
NodeConstraintValueSetContext.prototype.constructor = NodeConstraintValueSetContext;

ShExDocParser.NodeConstraintValueSetContext = NodeConstraintValueSetContext;

NodeConstraintValueSetContext.prototype.valueSet = function() {
    return this.getTypedRuleContext(ValueSetContext,0);
};

NodeConstraintValueSetContext.prototype.xsFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(XsFacetContext);
    } else {
        return this.getTypedRuleContext(XsFacetContext,i);
    }
};
NodeConstraintValueSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNodeConstraintValueSet(this);
	}
};

NodeConstraintValueSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNodeConstraintValueSet(this);
	}
};



ShExDocParser.InlineLitNodeConstraintContext = InlineLitNodeConstraintContext;

ShExDocParser.prototype.inlineLitNodeConstraint = function() {

    var localctx = new InlineLitNodeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ShExDocParser.RULE_inlineLitNodeConstraint);
    var _la = 0; // Token type
    try {
        this.state = 386;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_LITERAL:
            localctx = new NodeConstraintLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 344;
            this.match(ShExDocParser.KW_LITERAL);
            this.state = 348;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ShExDocParser.KW_MININCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MINEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXINCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_LENGTH - 39)) | (1 << (ShExDocParser.KW_MINLENGTH - 39)) | (1 << (ShExDocParser.KW_MAXLENGTH - 39)) | (1 << (ShExDocParser.KW_TOTALDIGITS - 39)) | (1 << (ShExDocParser.KW_FRACTIONDIGITS - 39)) | (1 << (ShExDocParser.REGEXP - 39)))) !== 0)) {
                this.state = 345;
                this.xsFacet();
                this.state = 350;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
             localctx.$$ = this.NC({nodeKind: "literal"}, localctx.children.slice(1)); 
            break;
        case ShExDocParser.KW_IRI:
        case ShExDocParser.KW_NONLITERAL:
        case ShExDocParser.KW_BNODE:
            localctx = new NodeConstraintNonLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 352;
            this.nonLiteralKind();
            this.state = 356;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ShExDocParser.KW_LENGTH - 43)) | (1 << (ShExDocParser.KW_MINLENGTH - 43)) | (1 << (ShExDocParser.KW_MAXLENGTH - 43)) | (1 << (ShExDocParser.REGEXP - 43)))) !== 0)) {
                this.state = 353;
                this.stringFacet();
                this.state = 358;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
             localctx.$$ = this.NC(localctx.children[0].$$, localctx.children.slice(1)); 
            break;
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            localctx = new NodeConstraintDatatypeContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 361;
            this.datatype();
            this.state = 365;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ShExDocParser.KW_MININCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MINEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXINCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_LENGTH - 39)) | (1 << (ShExDocParser.KW_MINLENGTH - 39)) | (1 << (ShExDocParser.KW_MAXLENGTH - 39)) | (1 << (ShExDocParser.KW_TOTALDIGITS - 39)) | (1 << (ShExDocParser.KW_FRACTIONDIGITS - 39)) | (1 << (ShExDocParser.REGEXP - 39)))) !== 0)) {
                this.state = 362;
                this.xsFacet();
                this.state = 367;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
             localctx.$$ = this.NC({ datatype: localctx.children[0].$$ }, localctx.children.slice(1)); 
            break;
        case ShExDocParser.T__14:
            localctx = new NodeConstraintValueSetContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 370;
            this.valueSet();
            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ShExDocParser.KW_MININCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MINEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXINCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_LENGTH - 39)) | (1 << (ShExDocParser.KW_MINLENGTH - 39)) | (1 << (ShExDocParser.KW_MAXLENGTH - 39)) | (1 << (ShExDocParser.KW_TOTALDIGITS - 39)) | (1 << (ShExDocParser.KW_FRACTIONDIGITS - 39)) | (1 << (ShExDocParser.REGEXP - 39)))) !== 0)) {
                this.state = 371;
                this.xsFacet();
                this.state = 376;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
             localctx.$$ = this.NC({ values: localctx.children[0].$$ }, localctx.children.slice(1)); 
            break;
        case ShExDocParser.KW_MININCLUSIVE:
        case ShExDocParser.KW_MINEXCLUSIVE:
        case ShExDocParser.KW_MAXINCLUSIVE:
        case ShExDocParser.KW_MAXEXCLUSIVE:
        case ShExDocParser.KW_TOTALDIGITS:
        case ShExDocParser.KW_FRACTIONDIGITS:
            localctx = new NodeConstraintNumericFacetContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 380; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 379;
                this.numericFacet();
                this.state = 382; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (ShExDocParser.KW_MININCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MINEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXINCLUSIVE - 39)) | (1 << (ShExDocParser.KW_MAXEXCLUSIVE - 39)) | (1 << (ShExDocParser.KW_TOTALDIGITS - 39)) | (1 << (ShExDocParser.KW_FRACTIONDIGITS - 39)))) !== 0));
             localctx.$$ = this.NC({}, localctx.children); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LitNodeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_litNodeConstraint;
    return this;
}

LitNodeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LitNodeConstraintContext.prototype.constructor = LitNodeConstraintContext;

LitNodeConstraintContext.prototype.inlineLitNodeConstraint = function() {
    return this.getTypedRuleContext(InlineLitNodeConstraintContext,0);
};

LitNodeConstraintContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

LitNodeConstraintContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

LitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLitNodeConstraint(this);
	}
};

LitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLitNodeConstraint(this);
	}
};




ShExDocParser.LitNodeConstraintContext = LitNodeConstraintContext;

ShExDocParser.prototype.litNodeConstraint = function() {

    var localctx = new LitNodeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ShExDocParser.RULE_litNodeConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.inlineLitNodeConstraint();
        this.state = 392;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__18) {
            this.state = 389;
            this.annotation();
            this.state = 394;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 398;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__19) {
            this.state = 395;
            this.semanticAction();
            this.state = 400;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

                this.$1(localctx);
                if (localctx.annotation().length) { localctx.$$.annotations = localctx.annotation().map(c => c.$$); }
                if (localctx.semanticAction().length) { localctx.$$.semActs = localctx.semanticAction().map(c => c.$$); }
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineNonLitNodeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineNonLitNodeConstraint;
    return this;
}

InlineNonLitNodeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineNonLitNodeConstraintContext.prototype.constructor = InlineNonLitNodeConstraintContext;


 
InlineNonLitNodeConstraintContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function LitNodeConstraintStringFacetContext(parser, ctx) {
	InlineNonLitNodeConstraintContext.call(this, parser);
    InlineNonLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LitNodeConstraintStringFacetContext.prototype = Object.create(InlineNonLitNodeConstraintContext.prototype);
LitNodeConstraintStringFacetContext.prototype.constructor = LitNodeConstraintStringFacetContext;

ShExDocParser.LitNodeConstraintStringFacetContext = LitNodeConstraintStringFacetContext;

LitNodeConstraintStringFacetContext.prototype.stringFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringFacetContext);
    } else {
        return this.getTypedRuleContext(StringFacetContext,i);
    }
};
LitNodeConstraintStringFacetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLitNodeConstraintStringFacet(this);
	}
};

LitNodeConstraintStringFacetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLitNodeConstraintStringFacet(this);
	}
};


function LitNodeConstraintLiteralContext(parser, ctx) {
	InlineNonLitNodeConstraintContext.call(this, parser);
    InlineNonLitNodeConstraintContext.prototype.copyFrom.call(this, ctx);
    return this;
}

LitNodeConstraintLiteralContext.prototype = Object.create(InlineNonLitNodeConstraintContext.prototype);
LitNodeConstraintLiteralContext.prototype.constructor = LitNodeConstraintLiteralContext;

ShExDocParser.LitNodeConstraintLiteralContext = LitNodeConstraintLiteralContext;

LitNodeConstraintLiteralContext.prototype.nonLiteralKind = function() {
    return this.getTypedRuleContext(NonLiteralKindContext,0);
};

LitNodeConstraintLiteralContext.prototype.stringFacet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StringFacetContext);
    } else {
        return this.getTypedRuleContext(StringFacetContext,i);
    }
};
LitNodeConstraintLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLitNodeConstraintLiteral(this);
	}
};

LitNodeConstraintLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLitNodeConstraintLiteral(this);
	}
};



ShExDocParser.InlineNonLitNodeConstraintContext = InlineNonLitNodeConstraintContext;

ShExDocParser.prototype.inlineNonLitNodeConstraint = function() {

    var localctx = new InlineNonLitNodeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ShExDocParser.RULE_inlineNonLitNodeConstraint);
    var _la = 0; // Token type
    try {
        this.state = 419;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_IRI:
        case ShExDocParser.KW_NONLITERAL:
        case ShExDocParser.KW_BNODE:
            localctx = new LitNodeConstraintLiteralContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 403;
            this.nonLiteralKind();
            this.state = 407;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ShExDocParser.KW_LENGTH - 43)) | (1 << (ShExDocParser.KW_MINLENGTH - 43)) | (1 << (ShExDocParser.KW_MAXLENGTH - 43)) | (1 << (ShExDocParser.REGEXP - 43)))) !== 0)) {
                this.state = 404;
                this.stringFacet();
                this.state = 409;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }

                    localctx.$$ = localctx.children.slice(1).reduce((acc, p) => Object.assign(acc, p.$$), Object.assign({ type: "NodeConstraint" }, localctx.children[0].$$))
                  
            break;
        case ShExDocParser.KW_LENGTH:
        case ShExDocParser.KW_MINLENGTH:
        case ShExDocParser.KW_MAXLENGTH:
        case ShExDocParser.REGEXP:
            localctx = new LitNodeConstraintStringFacetContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 413; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 412;
                this.stringFacet();
                this.state = 415; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (ShExDocParser.KW_LENGTH - 43)) | (1 << (ShExDocParser.KW_MINLENGTH - 43)) | (1 << (ShExDocParser.KW_MAXLENGTH - 43)) | (1 << (ShExDocParser.REGEXP - 43)))) !== 0));

                    localctx.$$ = localctx.children.reduce((acc, c) => Object.assign(acc, c.$$), {type: "NodeConstraint"});
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonLitNodeConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_nonLitNodeConstraint;
    return this;
}

NonLitNodeConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonLitNodeConstraintContext.prototype.constructor = NonLitNodeConstraintContext;

NonLitNodeConstraintContext.prototype.inlineNonLitNodeConstraint = function() {
    return this.getTypedRuleContext(InlineNonLitNodeConstraintContext,0);
};

NonLitNodeConstraintContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

NonLitNodeConstraintContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

NonLitNodeConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNonLitNodeConstraint(this);
	}
};

NonLitNodeConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNonLitNodeConstraint(this);
	}
};




ShExDocParser.NonLitNodeConstraintContext = NonLitNodeConstraintContext;

ShExDocParser.prototype.nonLitNodeConstraint = function() {

    var localctx = new NonLitNodeConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ShExDocParser.RULE_nonLitNodeConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 421;
        this.inlineNonLitNodeConstraint();
        this.state = 425;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__18) {
            this.state = 422;
            this.annotation();
            this.state = 427;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 431;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__19) {
            this.state = 428;
            this.semanticAction();
            this.state = 433;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
         // t: !!
                localctx.$$ = localctx.children[0].$$;
                if (localctx.annotation().length) { localctx.$$.annotations = localctx.annotation().map(c => c.$$); } // t: !!
                if (localctx.semanticAction().length) { localctx.$$.semActs = localctx.semanticAction().map(c => c.$$); } // t: !!
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NonLiteralKindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_nonLiteralKind;
    return this;
}

NonLiteralKindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NonLiteralKindContext.prototype.constructor = NonLiteralKindContext;

NonLiteralKindContext.prototype.KW_IRI = function() {
    return this.getToken(ShExDocParser.KW_IRI, 0);
};

NonLiteralKindContext.prototype.KW_BNODE = function() {
    return this.getToken(ShExDocParser.KW_BNODE, 0);
};

NonLiteralKindContext.prototype.KW_NONLITERAL = function() {
    return this.getToken(ShExDocParser.KW_NONLITERAL, 0);
};

NonLiteralKindContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNonLiteralKind(this);
	}
};

NonLiteralKindContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNonLiteralKind(this);
	}
};




ShExDocParser.NonLiteralKindContext = NonLiteralKindContext;

ShExDocParser.prototype.nonLiteralKind = function() {

    var localctx = new NonLiteralKindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ShExDocParser.RULE_nonLiteralKind);
    try {
        this.state = 442;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_IRI:
            this.enterOuterAlt(localctx, 1);
            this.state = 436;
            this.match(ShExDocParser.KW_IRI);
             localctx.$$ = { nodeKind: "iri" }; 
            break;
        case ShExDocParser.KW_BNODE:
            this.enterOuterAlt(localctx, 2);
            this.state = 438;
            this.match(ShExDocParser.KW_BNODE);
             localctx.$$ = { nodeKind: "bnode" }; 
            break;
        case ShExDocParser.KW_NONLITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 440;
            this.match(ShExDocParser.KW_NONLITERAL);
             localctx.$$ = { nodeKind: "nonliteral" }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function XsFacetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_xsFacet;
    return this;
}

XsFacetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
XsFacetContext.prototype.constructor = XsFacetContext;

XsFacetContext.prototype.stringFacet = function() {
    return this.getTypedRuleContext(StringFacetContext,0);
};

XsFacetContext.prototype.numericFacet = function() {
    return this.getTypedRuleContext(NumericFacetContext,0);
};

XsFacetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterXsFacet(this);
	}
};

XsFacetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitXsFacet(this);
	}
};




ShExDocParser.XsFacetContext = XsFacetContext;

ShExDocParser.prototype.xsFacet = function() {

    var localctx = new XsFacetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ShExDocParser.RULE_xsFacet);
    try {
        this.state = 450;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_LENGTH:
        case ShExDocParser.KW_MINLENGTH:
        case ShExDocParser.KW_MAXLENGTH:
        case ShExDocParser.REGEXP:
            this.enterOuterAlt(localctx, 1);
            this.state = 444;
            this.stringFacet();
             this.$1(localctx); 
            break;
        case ShExDocParser.KW_MININCLUSIVE:
        case ShExDocParser.KW_MINEXCLUSIVE:
        case ShExDocParser.KW_MAXINCLUSIVE:
        case ShExDocParser.KW_MAXEXCLUSIVE:
        case ShExDocParser.KW_TOTALDIGITS:
        case ShExDocParser.KW_FRACTIONDIGITS:
            this.enterOuterAlt(localctx, 2);
            this.state = 447;
            this.numericFacet();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringFacetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_stringFacet;
    return this;
}

StringFacetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringFacetContext.prototype.constructor = StringFacetContext;

StringFacetContext.prototype.stringLength = function() {
    return this.getTypedRuleContext(StringLengthContext,0);
};

StringFacetContext.prototype.INTEGER = function() {
    return this.getToken(ShExDocParser.INTEGER, 0);
};

StringFacetContext.prototype.REGEXP = function() {
    return this.getToken(ShExDocParser.REGEXP, 0);
};

StringFacetContext.prototype.REGEXP_FLAGS = function() {
    return this.getToken(ShExDocParser.REGEXP_FLAGS, 0);
};

StringFacetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStringFacet(this);
	}
};

StringFacetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStringFacet(this);
	}
};




ShExDocParser.StringFacetContext = StringFacetContext;

ShExDocParser.prototype.stringFacet = function() {

    var localctx = new StringFacetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ShExDocParser.RULE_stringFacet);
    var _la = 0; // Token type
    try {
        this.state = 461;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_LENGTH:
        case ShExDocParser.KW_MINLENGTH:
        case ShExDocParser.KW_MAXLENGTH:
            this.enterOuterAlt(localctx, 1);
            this.state = 452;
            this.stringLength();
            this.state = 453;
            this.match(ShExDocParser.INTEGER);
             localctx.$$ = this.keyValObject(localctx.children[0].$$, parseInt(localctx.children[1].getText(), 10)); 
            break;
        case ShExDocParser.REGEXP:
            this.enterOuterAlt(localctx, 2);
            this.state = 456;
            this.match(ShExDocParser.REGEXP);
            this.state = 458;
            _la = this._input.LA(1);
            if(_la===ShExDocParser.REGEXP_FLAGS) {
                this.state = 457;
                this.match(ShExDocParser.REGEXP_FLAGS);
            }

             localctx.$$ = this.unescapeRegexp(localctx.children[0].getText()); if (localctx.REGEXP_FLAGS()) {localctx.$$.flags = localctx.REGEXP_FLAGS().getText()} 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_stringLength;
    return this;
}

StringLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLengthContext.prototype.constructor = StringLengthContext;

StringLengthContext.prototype.KW_LENGTH = function() {
    return this.getToken(ShExDocParser.KW_LENGTH, 0);
};

StringLengthContext.prototype.KW_MINLENGTH = function() {
    return this.getToken(ShExDocParser.KW_MINLENGTH, 0);
};

StringLengthContext.prototype.KW_MAXLENGTH = function() {
    return this.getToken(ShExDocParser.KW_MAXLENGTH, 0);
};

StringLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStringLength(this);
	}
};

StringLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStringLength(this);
	}
};




ShExDocParser.StringLengthContext = StringLengthContext;

ShExDocParser.prototype.stringLength = function() {

    var localctx = new StringLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ShExDocParser.RULE_stringLength);
    try {
        this.state = 469;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_LENGTH:
            this.enterOuterAlt(localctx, 1);
            this.state = 463;
            this.match(ShExDocParser.KW_LENGTH);
             localctx.$$ = "length"; 
            break;
        case ShExDocParser.KW_MINLENGTH:
            this.enterOuterAlt(localctx, 2);
            this.state = 465;
            this.match(ShExDocParser.KW_MINLENGTH);
             localctx.$$ = "minlength"; 
            break;
        case ShExDocParser.KW_MAXLENGTH:
            this.enterOuterAlt(localctx, 3);
            this.state = 467;
            this.match(ShExDocParser.KW_MAXLENGTH);
             localctx.$$ = "maxlength"; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericFacetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_numericFacet;
    return this;
}

NumericFacetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericFacetContext.prototype.constructor = NumericFacetContext;

NumericFacetContext.prototype.numericRange = function() {
    return this.getTypedRuleContext(NumericRangeContext,0);
};

NumericFacetContext.prototype.rawNumeric = function() {
    return this.getTypedRuleContext(RawNumericContext,0);
};

NumericFacetContext.prototype.numericLength = function() {
    return this.getTypedRuleContext(NumericLengthContext,0);
};

NumericFacetContext.prototype.INTEGER = function() {
    return this.getToken(ShExDocParser.INTEGER, 0);
};

NumericFacetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNumericFacet(this);
	}
};

NumericFacetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNumericFacet(this);
	}
};




ShExDocParser.NumericFacetContext = NumericFacetContext;

ShExDocParser.prototype.numericFacet = function() {

    var localctx = new NumericFacetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ShExDocParser.RULE_numericFacet);
    try {
        this.state = 479;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_MININCLUSIVE:
        case ShExDocParser.KW_MINEXCLUSIVE:
        case ShExDocParser.KW_MAXINCLUSIVE:
        case ShExDocParser.KW_MAXEXCLUSIVE:
            this.enterOuterAlt(localctx, 1);
            this.state = 471;
            this.numericRange();
            this.state = 472;
            this.rawNumeric();
             localctx.$$ = this.keyValObject(localctx.children[0].$$, localctx.children[1].$$); 
            break;
        case ShExDocParser.KW_TOTALDIGITS:
        case ShExDocParser.KW_FRACTIONDIGITS:
            this.enterOuterAlt(localctx, 2);
            this.state = 475;
            this.numericLength();
            this.state = 476;
            this.match(ShExDocParser.INTEGER);
             localctx.$$ = this.keyValObject(localctx.children[0].$$, parseInt(localctx.children[1].getText(), 10)); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_numericRange;
    return this;
}

NumericRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericRangeContext.prototype.constructor = NumericRangeContext;

NumericRangeContext.prototype.KW_MININCLUSIVE = function() {
    return this.getToken(ShExDocParser.KW_MININCLUSIVE, 0);
};

NumericRangeContext.prototype.KW_MINEXCLUSIVE = function() {
    return this.getToken(ShExDocParser.KW_MINEXCLUSIVE, 0);
};

NumericRangeContext.prototype.KW_MAXINCLUSIVE = function() {
    return this.getToken(ShExDocParser.KW_MAXINCLUSIVE, 0);
};

NumericRangeContext.prototype.KW_MAXEXCLUSIVE = function() {
    return this.getToken(ShExDocParser.KW_MAXEXCLUSIVE, 0);
};

NumericRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNumericRange(this);
	}
};

NumericRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNumericRange(this);
	}
};




ShExDocParser.NumericRangeContext = NumericRangeContext;

ShExDocParser.prototype.numericRange = function() {

    var localctx = new NumericRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ShExDocParser.RULE_numericRange);
    try {
        this.state = 489;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_MININCLUSIVE:
            this.enterOuterAlt(localctx, 1);
            this.state = 481;
            this.match(ShExDocParser.KW_MININCLUSIVE);
             localctx.$$ = "mininclusive"; 
            break;
        case ShExDocParser.KW_MINEXCLUSIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 483;
            this.match(ShExDocParser.KW_MINEXCLUSIVE);
             localctx.$$ = "minexclusive"; 
            break;
        case ShExDocParser.KW_MAXINCLUSIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 485;
            this.match(ShExDocParser.KW_MAXINCLUSIVE);
             localctx.$$ = "maxinclusive"; 
            break;
        case ShExDocParser.KW_MAXEXCLUSIVE:
            this.enterOuterAlt(localctx, 4);
            this.state = 487;
            this.match(ShExDocParser.KW_MAXEXCLUSIVE);
             localctx.$$ = "maxexclusive"; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_numericLength;
    return this;
}

NumericLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLengthContext.prototype.constructor = NumericLengthContext;

NumericLengthContext.prototype.KW_TOTALDIGITS = function() {
    return this.getToken(ShExDocParser.KW_TOTALDIGITS, 0);
};

NumericLengthContext.prototype.KW_FRACTIONDIGITS = function() {
    return this.getToken(ShExDocParser.KW_FRACTIONDIGITS, 0);
};

NumericLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNumericLength(this);
	}
};

NumericLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNumericLength(this);
	}
};




ShExDocParser.NumericLengthContext = NumericLengthContext;

ShExDocParser.prototype.numericLength = function() {

    var localctx = new NumericLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ShExDocParser.RULE_numericLength);
    try {
        this.state = 495;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_TOTALDIGITS:
            this.enterOuterAlt(localctx, 1);
            this.state = 491;
            this.match(ShExDocParser.KW_TOTALDIGITS);
             localctx.$$ = "totaldigits"; 
            break;
        case ShExDocParser.KW_FRACTIONDIGITS:
            this.enterOuterAlt(localctx, 2);
            this.state = 493;
            this.match(ShExDocParser.KW_FRACTIONDIGITS);
             localctx.$$ = "fractiondigits"; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RawNumericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_rawNumeric;
    return this;
}

RawNumericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RawNumericContext.prototype.constructor = RawNumericContext;

RawNumericContext.prototype.INTEGER = function() {
    return this.getToken(ShExDocParser.INTEGER, 0);
};

RawNumericContext.prototype.DECIMAL = function() {
    return this.getToken(ShExDocParser.DECIMAL, 0);
};

RawNumericContext.prototype.DOUBLE = function() {
    return this.getToken(ShExDocParser.DOUBLE, 0);
};

RawNumericContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterRawNumeric(this);
	}
};

RawNumericContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitRawNumeric(this);
	}
};




ShExDocParser.RawNumericContext = RawNumericContext;

ShExDocParser.prototype.rawNumeric = function() {

    var localctx = new RawNumericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ShExDocParser.RULE_rawNumeric);
    try {
        this.state = 503;
        switch(this._input.LA(1)) {
        case ShExDocParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 497;
            this.match(ShExDocParser.INTEGER);
             localctx.$$ = parseInt(localctx.children[0].getText()); 
            break;
        case ShExDocParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 499;
            this.match(ShExDocParser.DECIMAL);
             localctx.$$ = parseFloat(localctx.children[0].getText()); 
            break;
        case ShExDocParser.DOUBLE:
            this.enterOuterAlt(localctx, 3);
            this.state = 501;
            this.match(ShExDocParser.DOUBLE);
             localctx.$$ = parseFloat(localctx.children[0].getText()); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeDefinition;
    return this;
}

ShapeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeDefinitionContext.prototype.constructor = ShapeDefinitionContext;

ShapeDefinitionContext.prototype.inlineShapeDefinition = function() {
    return this.getTypedRuleContext(InlineShapeDefinitionContext,0);
};

ShapeDefinitionContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

ShapeDefinitionContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

ShapeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeDefinition(this);
	}
};

ShapeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeDefinition(this);
	}
};




ShExDocParser.ShapeDefinitionContext = ShapeDefinitionContext;

ShExDocParser.prototype.shapeDefinition = function() {

    var localctx = new ShapeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ShExDocParser.RULE_shapeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.inlineShapeDefinition();
        this.state = 509;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__18) {
            this.state = 506;
            this.annotation();
            this.state = 511;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 515;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__19) {
            this.state = 512;
            this.semanticAction();
            this.state = 517;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

                localctx.$$ = localctx.children[0].$$;
                if (localctx.annotation().length) { localctx.$$.annotations = localctx.annotation().map(c => c.$$); }
                if (localctx.semanticAction().length) { localctx.$$.semActs = localctx.semanticAction().map(c => c.$$); }
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeDefinition;
    return this;
}

InlineShapeDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeDefinitionContext.prototype.constructor = InlineShapeDefinitionContext;

InlineShapeDefinitionContext.prototype.qualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QualifierContext);
    } else {
        return this.getTypedRuleContext(QualifierContext,i);
    }
};

InlineShapeDefinitionContext.prototype.tripleExpression = function() {
    return this.getTypedRuleContext(TripleExpressionContext,0);
};

InlineShapeDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeDefinition(this);
	}
};

InlineShapeDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeDefinition(this);
	}
};




ShExDocParser.InlineShapeDefinitionContext = InlineShapeDefinitionContext;

ShExDocParser.prototype.inlineShapeDefinition = function() {

    var localctx = new InlineShapeDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ShExDocParser.RULE_inlineShapeDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.KW_CLOSED || _la===ShExDocParser.KW_EXTRA) {
            this.state = 520;
            this.qualifier();
            this.state = 525;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 526;
        this.match(ShExDocParser.T__5);
        this.state = 528;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.T__1) | (1 << ShExDocParser.T__9) | (1 << ShExDocParser.T__13) | (1 << ShExDocParser.T__17))) !== 0) || ((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (ShExDocParser.RDF_TYPE - 54)) | (1 << (ShExDocParser.IRIREF - 54)) | (1 << (ShExDocParser.PNAME_NS - 54)) | (1 << (ShExDocParser.PNAME_LN - 54)))) !== 0)) {
            this.state = 527;
            this.tripleExpression();
        }

        this.state = 530;
        this.match(ShExDocParser.T__6);

                var exprObj = localctx.tripleExpression() ? { expression: localctx.tripleExpression().$$ } : this.EmptyObject; // t: 0, 0Inherit1
                localctx.$$ = (exprObj === this.EmptyObject && localctx.qualifier().length === 0) ?
                  this.EmptyShape :
                  this.extend({ type: "Shape" }, localctx.qualifier().reduce((acc, c) => {
                    let k = Object.keys(c.$$)[0]; // only one key/value in qualifier result
                    return this.extend(acc, k in acc && k !== "closed" ? this.keyValObject(k, acc[k].concat(c.$$[k])) : c.$$)
                  }, {}), exprObj);
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_qualifier;
    return this;
}

QualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QualifierContext.prototype.constructor = QualifierContext;

QualifierContext.prototype.extraPropertySet = function() {
    return this.getTypedRuleContext(ExtraPropertySetContext,0);
};

QualifierContext.prototype.KW_CLOSED = function() {
    return this.getToken(ShExDocParser.KW_CLOSED, 0);
};

QualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterQualifier(this);
	}
};

QualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitQualifier(this);
	}
};




ShExDocParser.QualifierContext = QualifierContext;

ShExDocParser.prototype.qualifier = function() {

    var localctx = new QualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ShExDocParser.RULE_qualifier);
    try {
        this.state = 538;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_EXTRA:
            this.enterOuterAlt(localctx, 1);
            this.state = 533;
            this.extraPropertySet();
             localctx.$$ = { extra: localctx.children[1-1].$$ } 
            break;
        case ShExDocParser.KW_CLOSED:
            this.enterOuterAlt(localctx, 2);
            this.state = 536;
            this.match(ShExDocParser.KW_CLOSED);
             localctx.$$ = { closed: true } 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtraPropertySetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_extraPropertySet;
    return this;
}

ExtraPropertySetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtraPropertySetContext.prototype.constructor = ExtraPropertySetContext;

ExtraPropertySetContext.prototype.KW_EXTRA = function() {
    return this.getToken(ShExDocParser.KW_EXTRA, 0);
};

ExtraPropertySetContext.prototype.predicate = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PredicateContext);
    } else {
        return this.getTypedRuleContext(PredicateContext,i);
    }
};

ExtraPropertySetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterExtraPropertySet(this);
	}
};

ExtraPropertySetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitExtraPropertySet(this);
	}
};




ShExDocParser.ExtraPropertySetContext = ExtraPropertySetContext;

ShExDocParser.prototype.extraPropertySet = function() {

    var localctx = new ExtraPropertySetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ShExDocParser.RULE_extraPropertySet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(ShExDocParser.KW_EXTRA);
        this.state = 542; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 541;
            this.predicate();
            this.state = 544; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 54)) & ~0x1f) == 0 && ((1 << (_la - 54)) & ((1 << (ShExDocParser.RDF_TYPE - 54)) | (1 << (ShExDocParser.IRIREF - 54)) | (1 << (ShExDocParser.PNAME_NS - 54)) | (1 << (ShExDocParser.PNAME_LN - 54)))) !== 0));
         localctx.$$ = localctx.children.slice(1).map(c => c.$$); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TripleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_tripleExpression;
    return this;
}

TripleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TripleExpressionContext.prototype.constructor = TripleExpressionContext;

TripleExpressionContext.prototype.oneOfTripleExpr = function() {
    return this.getTypedRuleContext(OneOfTripleExprContext,0);
};

TripleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterTripleExpression(this);
	}
};

TripleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitTripleExpression(this);
	}
};




ShExDocParser.TripleExpressionContext = TripleExpressionContext;

ShExDocParser.prototype.tripleExpression = function() {

    var localctx = new TripleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ShExDocParser.RULE_tripleExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.oneOfTripleExpr();
         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OneOfTripleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_oneOfTripleExpr;
    return this;
}

OneOfTripleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OneOfTripleExprContext.prototype.constructor = OneOfTripleExprContext;

OneOfTripleExprContext.prototype.groupTripleExpr = function() {
    return this.getTypedRuleContext(GroupTripleExprContext,0);
};

OneOfTripleExprContext.prototype.multiElementOneOf = function() {
    return this.getTypedRuleContext(MultiElementOneOfContext,0);
};

OneOfTripleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterOneOfTripleExpr(this);
	}
};

OneOfTripleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitOneOfTripleExpr(this);
	}
};




ShExDocParser.OneOfTripleExprContext = OneOfTripleExprContext;

ShExDocParser.prototype.oneOfTripleExpr = function() {

    var localctx = new OneOfTripleExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ShExDocParser.RULE_oneOfTripleExpr);
    try {
        this.state = 557;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 551;
            this.groupTripleExpr();
             this.$1(localctx); 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 554;
            this.multiElementOneOf();
             this.$1(localctx); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiElementOneOfContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_multiElementOneOf;
    return this;
}

MultiElementOneOfContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiElementOneOfContext.prototype.constructor = MultiElementOneOfContext;

MultiElementOneOfContext.prototype.groupTripleExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupTripleExprContext);
    } else {
        return this.getTypedRuleContext(GroupTripleExprContext,i);
    }
};

MultiElementOneOfContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterMultiElementOneOf(this);
	}
};

MultiElementOneOfContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitMultiElementOneOf(this);
	}
};




ShExDocParser.MultiElementOneOfContext = MultiElementOneOfContext;

ShExDocParser.prototype.multiElementOneOf = function() {

    var localctx = new MultiElementOneOfContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ShExDocParser.RULE_multiElementOneOf);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 559;
        this.groupTripleExpr();
        this.state = 562; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 560;
            this.match(ShExDocParser.T__7);
            this.state = 561;
            this.groupTripleExpr();
            this.state = 564; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ShExDocParser.T__7);
         localctx.$$ = { type: "OneOf", expressions: localctx.groupTripleExpr().map(c => c.$$) }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupTripleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_groupTripleExpr;
    return this;
}

GroupTripleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupTripleExprContext.prototype.constructor = GroupTripleExprContext;

GroupTripleExprContext.prototype.singleElementGroup = function() {
    return this.getTypedRuleContext(SingleElementGroupContext,0);
};

GroupTripleExprContext.prototype.multiElementGroup = function() {
    return this.getTypedRuleContext(MultiElementGroupContext,0);
};

GroupTripleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterGroupTripleExpr(this);
	}
};

GroupTripleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitGroupTripleExpr(this);
	}
};




ShExDocParser.GroupTripleExprContext = GroupTripleExprContext;

ShExDocParser.prototype.groupTripleExpr = function() {

    var localctx = new GroupTripleExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ShExDocParser.RULE_groupTripleExpr);
    try {
        this.state = 574;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,53,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 568;
            this.singleElementGroup();
             this.$1(localctx); 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 571;
            this.multiElementGroup();
             this.$1(localctx); 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SingleElementGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_singleElementGroup;
    return this;
}

SingleElementGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SingleElementGroupContext.prototype.constructor = SingleElementGroupContext;

SingleElementGroupContext.prototype.unaryTripleExpr = function() {
    return this.getTypedRuleContext(UnaryTripleExprContext,0);
};

SingleElementGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterSingleElementGroup(this);
	}
};

SingleElementGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitSingleElementGroup(this);
	}
};




ShExDocParser.SingleElementGroupContext = SingleElementGroupContext;

ShExDocParser.prototype.singleElementGroup = function() {

    var localctx = new SingleElementGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ShExDocParser.RULE_singleElementGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.unaryTripleExpr();
        this.state = 578;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.T__8) {
            this.state = 577;
            this.match(ShExDocParser.T__8);
        }

         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiElementGroupContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_multiElementGroup;
    return this;
}

MultiElementGroupContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiElementGroupContext.prototype.constructor = MultiElementGroupContext;

MultiElementGroupContext.prototype.unaryTripleExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnaryTripleExprContext);
    } else {
        return this.getTypedRuleContext(UnaryTripleExprContext,i);
    }
};

MultiElementGroupContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterMultiElementGroup(this);
	}
};

MultiElementGroupContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitMultiElementGroup(this);
	}
};




ShExDocParser.MultiElementGroupContext = MultiElementGroupContext;

ShExDocParser.prototype.multiElementGroup = function() {

    var localctx = new MultiElementGroupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ShExDocParser.RULE_multiElementGroup);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 582;
        this.unaryTripleExpr();
        this.state = 585; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 583;
        		this.match(ShExDocParser.T__8);
        		this.state = 584;
        		this.unaryTripleExpr();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 587; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,55, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 590;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.T__8) {
            this.state = 589;
            this.match(ShExDocParser.T__8);
        }

         localctx.$$ = { type: "EachOf", expressions: localctx.unaryTripleExpr().map(c => c.$$) }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryTripleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_unaryTripleExpr;
    return this;
}

UnaryTripleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryTripleExprContext.prototype.constructor = UnaryTripleExprContext;

UnaryTripleExprContext.prototype.tripleConstraint = function() {
    return this.getTypedRuleContext(TripleConstraintContext,0);
};

UnaryTripleExprContext.prototype.bracketedTripleExpr = function() {
    return this.getTypedRuleContext(BracketedTripleExprContext,0);
};

UnaryTripleExprContext.prototype.tripleExprLabel = function() {
    return this.getTypedRuleContext(TripleExprLabelContext,0);
};

UnaryTripleExprContext.prototype.include = function() {
    return this.getTypedRuleContext(IncludeContext,0);
};

UnaryTripleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterUnaryTripleExpr(this);
	}
};

UnaryTripleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitUnaryTripleExpr(this);
	}
};




ShExDocParser.UnaryTripleExprContext = UnaryTripleExprContext;

ShExDocParser.prototype.unaryTripleExpr = function() {

    var localctx = new UnaryTripleExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ShExDocParser.RULE_unaryTripleExpr);
    var _la = 0; // Token type
    try {
        this.state = 607;
        switch(this._input.LA(1)) {
        case ShExDocParser.T__1:
        case ShExDocParser.T__9:
        case ShExDocParser.T__13:
        case ShExDocParser.RDF_TYPE:
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 596;
            _la = this._input.LA(1);
            if(_la===ShExDocParser.T__9) {
                this.state = 594;
                this.match(ShExDocParser.T__9);
                this.state = 595;
                this.tripleExprLabel();
            }

            this.state = 600;
            switch(this._input.LA(1)) {
            case ShExDocParser.T__13:
            case ShExDocParser.RDF_TYPE:
            case ShExDocParser.IRIREF:
            case ShExDocParser.PNAME_NS:
            case ShExDocParser.PNAME_LN:
                this.state = 598;
                this.tripleConstraint();
                break;
            case ShExDocParser.T__1:
                this.state = 599;
                this.bracketedTripleExpr();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }

                    let expr = localctx.tripleConstraint() || localctx.bracketedTripleExpr();
                    if (localctx.tripleExprLabel()) {
                      localctx.$$ = this.extend({ id: localctx.tripleExprLabel().$$ }, expr.$$);
                      this.addProduction(localctx.tripleExprLabel().$$,  localctx.$$);
                    } else {
                      localctx.$$ = expr.$$
                    }
                  
            break;
        case ShExDocParser.T__17:
            this.enterOuterAlt(localctx, 2);
            this.state = 604;
            this.include();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BracketedTripleExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_bracketedTripleExpr;
    return this;
}

BracketedTripleExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BracketedTripleExprContext.prototype.constructor = BracketedTripleExprContext;

BracketedTripleExprContext.prototype.tripleExpression = function() {
    return this.getTypedRuleContext(TripleExpressionContext,0);
};

BracketedTripleExprContext.prototype.cardinality = function() {
    return this.getTypedRuleContext(CardinalityContext,0);
};

BracketedTripleExprContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

BracketedTripleExprContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

BracketedTripleExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterBracketedTripleExpr(this);
	}
};

BracketedTripleExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitBracketedTripleExpr(this);
	}
};




ShExDocParser.BracketedTripleExprContext = BracketedTripleExprContext;

ShExDocParser.prototype.bracketedTripleExpr = function() {

    var localctx = new BracketedTripleExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ShExDocParser.RULE_bracketedTripleExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 609;
        this.match(ShExDocParser.T__1);
        this.state = 610;
        this.tripleExpression();
        this.state = 611;
        this.match(ShExDocParser.T__2);
        this.state = 613;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.T__5) | (1 << ShExDocParser.T__10) | (1 << ShExDocParser.T__11))) !== 0) || _la===ShExDocParser.UNBOUNDED) {
            this.state = 612;
            this.cardinality();
        }

        this.state = 618;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__18) {
            this.state = 615;
            this.annotation();
            this.state = 620;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 624;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__19) {
            this.state = 621;
            this.semanticAction();
            this.state = 626;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

                localctx.$$ = localctx.tripleExpression().$$;
                let card = localctx.cardinality() ? localctx.cardinality().$$ : {  };
                if ("min" in card) { localctx.$$.min = card.min; } // t: open3groupdotclosecard23Annot3Code2
                if ("max" in card) { localctx.$$.max = card.max; } // t: open3groupdotclosecard23Annot3Code2
                if (localctx.annotation().length) {
                  localctx.$$.annotations = (localctx.$$.annotations ? localctx.$$.annotations : []).concat(localctx.annotation().map(c => c.$$));
                }
                if (localctx.semanticAction().length) {
                  localctx.$$.semActs = (localctx.$$.semActs ? localctx.$$.semActs : []).concat(localctx.semanticAction().map(c => c.$$));
                }
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TripleConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_tripleConstraint;
    return this;
}

TripleConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TripleConstraintContext.prototype.constructor = TripleConstraintContext;

TripleConstraintContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

TripleConstraintContext.prototype.inlineShapeExpression = function() {
    return this.getTypedRuleContext(InlineShapeExpressionContext,0);
};

TripleConstraintContext.prototype.senseFlags = function() {
    return this.getTypedRuleContext(SenseFlagsContext,0);
};

TripleConstraintContext.prototype.cardinality = function() {
    return this.getTypedRuleContext(CardinalityContext,0);
};

TripleConstraintContext.prototype.annotation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AnnotationContext);
    } else {
        return this.getTypedRuleContext(AnnotationContext,i);
    }
};

TripleConstraintContext.prototype.semanticAction = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SemanticActionContext);
    } else {
        return this.getTypedRuleContext(SemanticActionContext,i);
    }
};

TripleConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterTripleConstraint(this);
	}
};

TripleConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitTripleConstraint(this);
	}
};




ShExDocParser.TripleConstraintContext = TripleConstraintContext;

ShExDocParser.prototype.tripleConstraint = function() {

    var localctx = new TripleConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ShExDocParser.RULE_tripleConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 630;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.T__13) {
            this.state = 629;
            this.senseFlags();
        }

        this.state = 632;
        this.predicate();
        this.state = 633;
        this.inlineShapeExpression();
        this.state = 635;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ShExDocParser.T__5) | (1 << ShExDocParser.T__10) | (1 << ShExDocParser.T__11))) !== 0) || _la===ShExDocParser.UNBOUNDED) {
            this.state = 634;
            this.cardinality();
        }

        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__18) {
            this.state = 637;
            this.annotation();
            this.state = 642;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__19) {
            this.state = 643;
            this.semanticAction();
            this.state = 648;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }

                // $6: t: 1dotCode1
                // %6: t: 1inversedotCode1
                localctx.$$ = this.extend({ type: "TripleConstraint" }, localctx.senseFlags() ? localctx.senseFlags().$$ : {}, { predicate: localctx.predicate().$$ }, (localctx.inlineShapeExpression().$$ === this.EmptyShape ? {} : { valueExpr: localctx.inlineShapeExpression().$$ }), localctx.cardinality() ? localctx.cardinality().$$ : {}); // t: 1dot // t: 1inversedot
                if (localctx.annotation().length) { localctx.$$.annotations = localctx.annotation().map(c => c.$$); } // t: 1dotAnnot3 // t: 1inversedotAnnot3
                if (localctx.semanticAction().length) { localctx.$$.semActs = localctx.semanticAction().map(c => c.$$); }
              
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CardinalityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_cardinality;
    return this;
}

CardinalityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CardinalityContext.prototype.constructor = CardinalityContext;


 
CardinalityContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function StarCardinalityContext(parser, ctx) {
	CardinalityContext.call(this, parser);
    CardinalityContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StarCardinalityContext.prototype = Object.create(CardinalityContext.prototype);
StarCardinalityContext.prototype.constructor = StarCardinalityContext;

ShExDocParser.StarCardinalityContext = StarCardinalityContext;

StarCardinalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterStarCardinality(this);
	}
};

StarCardinalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitStarCardinality(this);
	}
};


function RepeatCardinalityContext(parser, ctx) {
	CardinalityContext.call(this, parser);
    CardinalityContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RepeatCardinalityContext.prototype = Object.create(CardinalityContext.prototype);
RepeatCardinalityContext.prototype.constructor = RepeatCardinalityContext;

ShExDocParser.RepeatCardinalityContext = RepeatCardinalityContext;

RepeatCardinalityContext.prototype.repeatRange = function() {
    return this.getTypedRuleContext(RepeatRangeContext,0);
};
RepeatCardinalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterRepeatCardinality(this);
	}
};

RepeatCardinalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitRepeatCardinality(this);
	}
};


function PlusCardinalityContext(parser, ctx) {
	CardinalityContext.call(this, parser);
    CardinalityContext.prototype.copyFrom.call(this, ctx);
    return this;
}

PlusCardinalityContext.prototype = Object.create(CardinalityContext.prototype);
PlusCardinalityContext.prototype.constructor = PlusCardinalityContext;

ShExDocParser.PlusCardinalityContext = PlusCardinalityContext;

PlusCardinalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterPlusCardinality(this);
	}
};

PlusCardinalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitPlusCardinality(this);
	}
};


function OptionalCardinalityContext(parser, ctx) {
	CardinalityContext.call(this, parser);
    CardinalityContext.prototype.copyFrom.call(this, ctx);
    return this;
}

OptionalCardinalityContext.prototype = Object.create(CardinalityContext.prototype);
OptionalCardinalityContext.prototype.constructor = OptionalCardinalityContext;

ShExDocParser.OptionalCardinalityContext = OptionalCardinalityContext;

OptionalCardinalityContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterOptionalCardinality(this);
	}
};

OptionalCardinalityContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitOptionalCardinality(this);
	}
};



ShExDocParser.CardinalityContext = CardinalityContext;

ShExDocParser.prototype.cardinality = function() {

    var localctx = new CardinalityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ShExDocParser.RULE_cardinality);
    try {
        this.state = 660;
        switch(this._input.LA(1)) {
        case ShExDocParser.UNBOUNDED:
            localctx = new StarCardinalityContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 651;
            this.match(ShExDocParser.UNBOUNDED);
             localctx.$$ = { min:0, max:this.UNBOUNDED }; 
            break;
        case ShExDocParser.T__10:
            localctx = new PlusCardinalityContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 653;
            this.match(ShExDocParser.T__10);
             localctx.$$ = { min:1, max:this.UNBOUNDED }; 
            break;
        case ShExDocParser.T__11:
            localctx = new OptionalCardinalityContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 655;
            this.match(ShExDocParser.T__11);
             localctx.$$ = { min:0, max:1 }; 
            break;
        case ShExDocParser.T__5:
            localctx = new RepeatCardinalityContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 657;
            this.repeatRange();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RepeatRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_repeatRange;
    return this;
}

RepeatRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RepeatRangeContext.prototype.constructor = RepeatRangeContext;


 
RepeatRangeContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExactRangeContext(parser, ctx) {
	RepeatRangeContext.call(this, parser);
    RepeatRangeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExactRangeContext.prototype = Object.create(RepeatRangeContext.prototype);
ExactRangeContext.prototype.constructor = ExactRangeContext;

ShExDocParser.ExactRangeContext = ExactRangeContext;

ExactRangeContext.prototype.INTEGER = function() {
    return this.getToken(ShExDocParser.INTEGER, 0);
};
ExactRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterExactRange(this);
	}
};

ExactRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitExactRange(this);
	}
};


function MinMaxRangeContext(parser, ctx) {
	RepeatRangeContext.call(this, parser);
    RepeatRangeContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MinMaxRangeContext.prototype = Object.create(RepeatRangeContext.prototype);
MinMaxRangeContext.prototype.constructor = MinMaxRangeContext;

ShExDocParser.MinMaxRangeContext = MinMaxRangeContext;

MinMaxRangeContext.prototype.INTEGER = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ShExDocParser.INTEGER);
    } else {
        return this.getToken(ShExDocParser.INTEGER, i);
    }
};


MinMaxRangeContext.prototype.UNBOUNDED = function() {
    return this.getToken(ShExDocParser.UNBOUNDED, 0);
};
MinMaxRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterMinMaxRange(this);
	}
};

MinMaxRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitMinMaxRange(this);
	}
};



ShExDocParser.RepeatRangeContext = RepeatRangeContext;

ShExDocParser.prototype.repeatRange = function() {

    var localctx = new RepeatRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ShExDocParser.RULE_repeatRange);
    var _la = 0; // Token type
    try {
        this.state = 674;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExactRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 662;
            this.match(ShExDocParser.T__5);
            this.state = 663;
            this.match(ShExDocParser.INTEGER);
            this.state = 664;
            this.match(ShExDocParser.T__6);

                    let i = parseInt(localctx.children[1].getText());
                    localctx.$$ = { min: i, max: i };
                  
            break;

        case 2:
            localctx = new MinMaxRangeContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 666;
            this.match(ShExDocParser.T__5);
            this.state = 667;
            this.match(ShExDocParser.INTEGER);
            this.state = 668;
            this.match(ShExDocParser.T__12);
            this.state = 670;
            _la = this._input.LA(1);
            if(_la===ShExDocParser.INTEGER || _la===ShExDocParser.UNBOUNDED) {
                this.state = 669;
                _la = this._input.LA(1);
                if(!(_la===ShExDocParser.INTEGER || _la===ShExDocParser.UNBOUNDED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 672;
            this.match(ShExDocParser.T__6);

                    let j = parseInt(localctx.children[1].getText());
                    if (localctx.UNBOUNDED()) {
                        localctx.$$ = { min: j, max: this.UNBOUNDED };
                    } else if (localctx.INTEGER().length > 1) {
                        localctx.$$ = { min: j, max: parseInt(localctx.children[3].getText()) };
                    } else {
                        localctx.$$ = { min: j, max: -1 };
                    }
                  
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SenseFlagsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_senseFlags;
    return this;
}

SenseFlagsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SenseFlagsContext.prototype.constructor = SenseFlagsContext;


SenseFlagsContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterSenseFlags(this);
	}
};

SenseFlagsContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitSenseFlags(this);
	}
};




ShExDocParser.SenseFlagsContext = SenseFlagsContext;

ShExDocParser.prototype.senseFlags = function() {

    var localctx = new SenseFlagsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ShExDocParser.RULE_senseFlags);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 676;
        this.match(ShExDocParser.T__13);
         localctx.$$ = { inverse: true }; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueSetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_valueSet;
    return this;
}

ValueSetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetContext.prototype.constructor = ValueSetContext;

ValueSetContext.prototype.valueSetValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ValueSetValueContext);
    } else {
        return this.getTypedRuleContext(ValueSetValueContext,i);
    }
};

ValueSetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterValueSet(this);
	}
};

ValueSetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitValueSet(this);
	}
};




ShExDocParser.ValueSetContext = ValueSetContext;

ShExDocParser.prototype.valueSet = function() {

    var localctx = new ValueSetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ShExDocParser.RULE_valueSet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 679;
        this.match(ShExDocParser.T__14);
        this.state = 683;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ShExDocParser.T__3 || ((((_la - 49)) & ~0x1f) == 0 && ((1 << (_la - 49)) & ((1 << (ShExDocParser.KW_TRUE - 49)) | (1 << (ShExDocParser.KW_FALSE - 49)) | (1 << (ShExDocParser.IRIREF - 49)) | (1 << (ShExDocParser.PNAME_NS - 49)) | (1 << (ShExDocParser.PNAME_LN - 49)) | (1 << (ShExDocParser.LANGTAG - 49)) | (1 << (ShExDocParser.INTEGER - 49)) | (1 << (ShExDocParser.DECIMAL - 49)) | (1 << (ShExDocParser.DOUBLE - 49)) | (1 << (ShExDocParser.STRING_LITERAL1 - 49)) | (1 << (ShExDocParser.STRING_LITERAL2 - 49)) | (1 << (ShExDocParser.STRING_LITERAL_LONG1 - 49)) | (1 << (ShExDocParser.STRING_LITERAL_LONG2 - 49)))) !== 0)) {
            this.state = 680;
            this.valueSetValue();
            this.state = 685;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 686;
        this.match(ShExDocParser.T__15);
         localctx.$$ = localctx.children.slice(1, localctx.children.length - 1).map(c => c.$$); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValueSetValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_valueSetValue;
    return this;
}

ValueSetValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValueSetValueContext.prototype.constructor = ValueSetValueContext;

ValueSetValueContext.prototype.iriRange = function() {
    return this.getTypedRuleContext(IriRangeContext,0);
};

ValueSetValueContext.prototype.literalRange = function() {
    return this.getTypedRuleContext(LiteralRangeContext,0);
};

ValueSetValueContext.prototype.languageRange = function() {
    return this.getTypedRuleContext(LanguageRangeContext,0);
};

ValueSetValueContext.prototype.iriExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IriExclusionContext);
    } else {
        return this.getTypedRuleContext(IriExclusionContext,i);
    }
};

ValueSetValueContext.prototype.literalExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralExclusionContext);
    } else {
        return this.getTypedRuleContext(LiteralExclusionContext,i);
    }
};

ValueSetValueContext.prototype.languageExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LanguageExclusionContext);
    } else {
        return this.getTypedRuleContext(LanguageExclusionContext,i);
    }
};

ValueSetValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterValueSetValue(this);
	}
};

ValueSetValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitValueSetValue(this);
	}
};




ShExDocParser.ValueSetValueContext = ValueSetValueContext;

ShExDocParser.prototype.valueSetValue = function() {

    var localctx = new ValueSetValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ShExDocParser.RULE_valueSetValue);
    var _la = 0; // Token type
    try {
        this.state = 722;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 689;
            this.iriRange();
             this.$1(localctx); 
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 692;
            this.literalRange();
             this.$1(localctx); 
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 695;
            this.languageRange();
             this.$1(localctx); 
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 698;
            this.match(ShExDocParser.T__3);
            this.state = 700; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 699;
                this.iriExclusion();
                this.state = 702; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ShExDocParser.T__16);
             localctx.$$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: localctx.children.slice(1).map(c => c.$$) }; 
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 706;
            this.match(ShExDocParser.T__3);
            this.state = 708; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 707;
                this.literalExclusion();
                this.state = 710; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ShExDocParser.T__16);
             localctx.$$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: localctx.children.slice(1).map(c => c.$$) }; 
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 714;
            this.match(ShExDocParser.T__3);
            this.state = 716; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 715;
                this.languageExclusion();
                this.state = 718; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ShExDocParser.T__16);
             localctx.$$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: localctx.children.slice(1).map(c => c.$$) }; 
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_iriRange;
    return this;
}

IriRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriRangeContext.prototype.constructor = IriRangeContext;

IriRangeContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

IriRangeContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

IriRangeContext.prototype.iriExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IriExclusionContext);
    } else {
        return this.getTypedRuleContext(IriExclusionContext,i);
    }
};

IriRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterIriRange(this);
	}
};

IriRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitIriRange(this);
	}
};




ShExDocParser.IriRangeContext = IriRangeContext;

ShExDocParser.prototype.iriRange = function() {

    var localctx = new IriRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ShExDocParser.RULE_iriRange);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 724;
        this.iri();
        this.state = 732;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 725;
            this.match(ShExDocParser.STEM_MARK);
            this.state = 729;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ShExDocParser.T__16) {
                this.state = 726;
                this.iriExclusion();
                this.state = 731;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }


                    if (localctx.STEM_MARK()) {
                        localctx.$$ = {  // t: 1val1iriStemMinusiriStem3, 1val1iriStem
                            type: localctx.iriExclusion().length ? "IriStemRange" : "IriStem",
                            stem: localctx.children[1-1].$$
                        };
                        if (localctx.iriExclusion().length)
                            localctx.$$.exclusions = localctx.iriExclusion().map(c => c.$$); // t: 1val1iriStemMinusiri3
                    } else {
                        localctx.$$ = localctx.children[1-1].$$; // t: 1val1IRI
                    }
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriExclusionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_iriExclusion;
    return this;
}

IriExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriExclusionContext.prototype.constructor = IriExclusionContext;

IriExclusionContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

IriExclusionContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

IriExclusionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterIriExclusion(this);
	}
};

IriExclusionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitIriExclusion(this);
	}
};




ShExDocParser.IriExclusionContext = IriExclusionContext;

ShExDocParser.prototype.iriExclusion = function() {

    var localctx = new IriExclusionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ShExDocParser.RULE_iriExclusion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        this.match(ShExDocParser.T__16);
        this.state = 737;
        this.iri();
        this.state = 739;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 738;
            this.match(ShExDocParser.STEM_MARK);
        }

         localctx.$$ = localctx.children[3-1] ? { type: "IriStem", stem: localctx.children[2-1].$$ } /* t: 1val1iriStemMinusiri3 */ : localctx.children[2-1].$$ ; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_literalRange;
    return this;
}

LiteralRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralRangeContext.prototype.constructor = LiteralRangeContext;

LiteralRangeContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

LiteralRangeContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

LiteralRangeContext.prototype.literalExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralExclusionContext);
    } else {
        return this.getTypedRuleContext(LiteralExclusionContext,i);
    }
};

LiteralRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLiteralRange(this);
	}
};

LiteralRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLiteralRange(this);
	}
};




ShExDocParser.LiteralRangeContext = LiteralRangeContext;

ShExDocParser.prototype.literalRange = function() {

    var localctx = new LiteralRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ShExDocParser.RULE_literalRange);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 743;
        this.literal();
        this.state = 751;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 744;
            this.match(ShExDocParser.STEM_MARK);
            this.state = 748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ShExDocParser.T__16) {
                this.state = 745;
                this.literalExclusion();
                this.state = 750;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }


                    if (localctx.STEM_MARK()) {
                        localctx.$$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
                            type: localctx.literalExclusion().length ? "LiteralStemRange" : "LiteralStem",
                            stem: localctx.children[1-1].$$.value
                        };
                        if (localctx.literalExclusion().length)
                            localctx.$$.exclusions = localctx.literalExclusion().map(c => c.$$); // t: 1val1literalStemMinusliteral3
                    } else {
                        localctx.$$ = localctx.children[1-1].$$; // t: 1val1LITERAL
                    }
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralExclusionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_literalExclusion;
    return this;
}

LiteralExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralExclusionContext.prototype.constructor = LiteralExclusionContext;

LiteralExclusionContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

LiteralExclusionContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

LiteralExclusionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLiteralExclusion(this);
	}
};

LiteralExclusionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLiteralExclusion(this);
	}
};




ShExDocParser.LiteralExclusionContext = LiteralExclusionContext;

ShExDocParser.prototype.literalExclusion = function() {

    var localctx = new LiteralExclusionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ShExDocParser.RULE_literalExclusion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 755;
        this.match(ShExDocParser.T__16);
        this.state = 756;
        this.literal();
        this.state = 758;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 757;
            this.match(ShExDocParser.STEM_MARK);
        }

         localctx.$$ = localctx.children[3-1] ? { type: "LiteralStem", stem: localctx.children[2-1].$$.value } /* t: 1val1literalStemMinusliteral3 */ : localctx.children[2-1].$$.value ; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LanguageRangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_languageRange;
    return this;
}

LanguageRangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LanguageRangeContext.prototype.constructor = LanguageRangeContext;

LanguageRangeContext.prototype.LANGTAG = function() {
    return this.getToken(ShExDocParser.LANGTAG, 0);
};

LanguageRangeContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

LanguageRangeContext.prototype.languageExclusion = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LanguageExclusionContext);
    } else {
        return this.getTypedRuleContext(LanguageExclusionContext,i);
    }
};

LanguageRangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLanguageRange(this);
	}
};

LanguageRangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLanguageRange(this);
	}
};




ShExDocParser.LanguageRangeContext = LanguageRangeContext;

ShExDocParser.prototype.languageRange = function() {

    var localctx = new LanguageRangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ShExDocParser.RULE_languageRange);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 762;
        this.match(ShExDocParser.LANGTAG);
        this.state = 770;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 763;
            this.match(ShExDocParser.STEM_MARK);
            this.state = 767;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ShExDocParser.T__16) {
                this.state = 764;
                this.languageExclusion();
                this.state = 769;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }


                    if (localctx.STEM_MARK()) {
                        localctx.$$ = {  // t: 1val1languageStemMinuslanguageStem3, 1val1languageStem
                            type: localctx.languageExclusion().length ? "LanguageStemRange" : "LanguageStem",
                            stem: localctx.children[1-1].getText().substr(1)
                        };
                        if (localctx.languageExclusion().length)
                            localctx.$$.exclusions = localctx.languageExclusion().map(c => c.$$); // t: 1val1languageStemMinuslanguage3
                    } else {
                        localctx.$$ = { type: "Language", languageTag: localctx.children[1-1].getText().substr(1) }; // t: 1val1LANGUAGE
                    }
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LanguageExclusionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_languageExclusion;
    return this;
}

LanguageExclusionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LanguageExclusionContext.prototype.constructor = LanguageExclusionContext;

LanguageExclusionContext.prototype.LANGTAG = function() {
    return this.getToken(ShExDocParser.LANGTAG, 0);
};

LanguageExclusionContext.prototype.STEM_MARK = function() {
    return this.getToken(ShExDocParser.STEM_MARK, 0);
};

LanguageExclusionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLanguageExclusion(this);
	}
};

LanguageExclusionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLanguageExclusion(this);
	}
};




ShExDocParser.LanguageExclusionContext = LanguageExclusionContext;

ShExDocParser.prototype.languageExclusion = function() {

    var localctx = new LanguageExclusionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ShExDocParser.RULE_languageExclusion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 774;
        this.match(ShExDocParser.T__16);
        this.state = 775;
        this.match(ShExDocParser.LANGTAG);
        this.state = 777;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.STEM_MARK) {
            this.state = 776;
            this.match(ShExDocParser.STEM_MARK);
        }

         localctx.$$ = localctx.children[3-1] ? { type: "LanguageStem", stem: localctx.children[2-1].getText().substr(1) } /* t: 1val1languageStemMinuslanguage3 */ : localctx.children[2-1].getText().substr(1) ; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IncludeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_include;
    return this;
}

IncludeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IncludeContext.prototype.constructor = IncludeContext;

IncludeContext.prototype.tripleExprLabel = function() {
    return this.getTypedRuleContext(TripleExprLabelContext,0);
};

IncludeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInclude(this);
	}
};

IncludeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInclude(this);
	}
};




ShExDocParser.IncludeContext = IncludeContext;

ShExDocParser.prototype.include = function() {

    var localctx = new IncludeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ShExDocParser.RULE_include);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 781;
        this.match(ShExDocParser.T__17);
        this.state = 782;
        this.tripleExprLabel();
         localctx.$$ = localctx.children[1].$$ 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_annotation;
    return this;
}

AnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnnotationContext.prototype.constructor = AnnotationContext;

AnnotationContext.prototype.predicate = function() {
    return this.getTypedRuleContext(PredicateContext,0);
};

AnnotationContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

AnnotationContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

AnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterAnnotation(this);
	}
};

AnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitAnnotation(this);
	}
};




ShExDocParser.AnnotationContext = AnnotationContext;

ShExDocParser.prototype.annotation = function() {

    var localctx = new AnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ShExDocParser.RULE_annotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.match(ShExDocParser.T__18);
        this.state = 786;
        this.predicate();
        this.state = 789;
        switch(this._input.LA(1)) {
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.state = 787;
            this.iri();
            break;
        case ShExDocParser.KW_TRUE:
        case ShExDocParser.KW_FALSE:
        case ShExDocParser.INTEGER:
        case ShExDocParser.DECIMAL:
        case ShExDocParser.DOUBLE:
        case ShExDocParser.STRING_LITERAL1:
        case ShExDocParser.STRING_LITERAL2:
        case ShExDocParser.STRING_LITERAL_LONG1:
        case ShExDocParser.STRING_LITERAL_LONG2:
            this.state = 788;
            this.literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
         localctx.$$ = { type: "Annotation", predicate: localctx.children[1].$$, object: localctx.children[2].$$ } 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SemanticActionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_semanticAction;
    return this;
}

SemanticActionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SemanticActionContext.prototype.constructor = SemanticActionContext;

SemanticActionContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

SemanticActionContext.prototype.CODE = function() {
    return this.getToken(ShExDocParser.CODE, 0);
};

SemanticActionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterSemanticAction(this);
	}
};

SemanticActionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitSemanticAction(this);
	}
};




ShExDocParser.SemanticActionContext = SemanticActionContext;

ShExDocParser.prototype.semanticAction = function() {

    var localctx = new SemanticActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ShExDocParser.RULE_semanticAction);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(ShExDocParser.T__19);
        this.state = 794;
        this.iri();
        this.state = 795;
        _la = this._input.LA(1);
        if(!(_la===ShExDocParser.T__19 || _la===ShExDocParser.CODE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }

                    let i = localctx.children[1].$$;
                    localctx.$$ = localctx.CODE() ? this.unescapeSemanticAction(i, localctx.CODE().getText()) /* t: 1dotCode1 */ : { type: "SemAct", name: i } // t: 1dotNoCode1
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

LiteralContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

LiteralContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitLiteral(this);
	}
};




ShExDocParser.LiteralContext = LiteralContext;

ShExDocParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ShExDocParser.RULE_literal);
    try {
        this.state = 807;
        switch(this._input.LA(1)) {
        case ShExDocParser.STRING_LITERAL1:
        case ShExDocParser.STRING_LITERAL2:
        case ShExDocParser.STRING_LITERAL_LONG1:
        case ShExDocParser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 1);
            this.state = 798;
            this.rdfLiteral();
             this.$1(localctx); 
            break;
        case ShExDocParser.INTEGER:
        case ShExDocParser.DECIMAL:
        case ShExDocParser.DOUBLE:
            this.enterOuterAlt(localctx, 2);
            this.state = 801;
            this.numericLiteral();
             this.$1(localctx); 
            break;
        case ShExDocParser.KW_TRUE:
        case ShExDocParser.KW_FALSE:
            this.enterOuterAlt(localctx, 3);
            this.state = 804;
            this.booleanLiteral();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PredicateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_predicate;
    return this;
}

PredicateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PredicateContext.prototype.constructor = PredicateContext;

PredicateContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

PredicateContext.prototype.rdfType = function() {
    return this.getTypedRuleContext(RdfTypeContext,0);
};

PredicateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterPredicate(this);
	}
};

PredicateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitPredicate(this);
	}
};




ShExDocParser.PredicateContext = PredicateContext;

ShExDocParser.prototype.predicate = function() {

    var localctx = new PredicateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ShExDocParser.RULE_predicate);
    try {
        this.state = 815;
        switch(this._input.LA(1)) {
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 809;
            this.iri();
             this.$1(localctx); 
            break;
        case ShExDocParser.RDF_TYPE:
            this.enterOuterAlt(localctx, 2);
            this.state = 812;
            this.rdfType();
             localctx.$$ = this.RDF_TYPE; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RdfTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_rdfType;
    return this;
}

RdfTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RdfTypeContext.prototype.constructor = RdfTypeContext;

RdfTypeContext.prototype.RDF_TYPE = function() {
    return this.getToken(ShExDocParser.RDF_TYPE, 0);
};

RdfTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterRdfType(this);
	}
};

RdfTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitRdfType(this);
	}
};




ShExDocParser.RdfTypeContext = RdfTypeContext;

ShExDocParser.prototype.rdfType = function() {

    var localctx = new RdfTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ShExDocParser.RULE_rdfType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this.match(ShExDocParser.RDF_TYPE);
         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatatypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_datatype;
    return this;
}

DatatypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatatypeContext.prototype.constructor = DatatypeContext;

DatatypeContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

DatatypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterDatatype(this);
	}
};

DatatypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitDatatype(this);
	}
};




ShExDocParser.DatatypeContext = DatatypeContext;

ShExDocParser.prototype.datatype = function() {

    var localctx = new DatatypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ShExDocParser.RULE_datatype);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 820;
        this.iri();
         this.$1(localctx); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShapeExprLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_shapeExprLabel;
    return this;
}

ShapeExprLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShapeExprLabelContext.prototype.constructor = ShapeExprLabelContext;

ShapeExprLabelContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

ShapeExprLabelContext.prototype.blankNode = function() {
    return this.getTypedRuleContext(BlankNodeContext,0);
};

ShapeExprLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterShapeExprLabel(this);
	}
};

ShapeExprLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitShapeExprLabel(this);
	}
};




ShExDocParser.ShapeExprLabelContext = ShapeExprLabelContext;

ShExDocParser.prototype.shapeExprLabel = function() {

    var localctx = new ShapeExprLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ShExDocParser.RULE_shapeExprLabel);
    try {
        this.state = 829;
        switch(this._input.LA(1)) {
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 823;
            this.iri();
             this.$1(localctx); 
            break;
        case ShExDocParser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 2);
            this.state = 826;
            this.blankNode();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TripleExprLabelContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_tripleExprLabel;
    return this;
}

TripleExprLabelContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TripleExprLabelContext.prototype.constructor = TripleExprLabelContext;

TripleExprLabelContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

TripleExprLabelContext.prototype.blankNode = function() {
    return this.getTypedRuleContext(BlankNodeContext,0);
};

TripleExprLabelContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterTripleExprLabel(this);
	}
};

TripleExprLabelContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitTripleExprLabel(this);
	}
};




ShExDocParser.TripleExprLabelContext = TripleExprLabelContext;

ShExDocParser.prototype.tripleExprLabel = function() {

    var localctx = new TripleExprLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ShExDocParser.RULE_tripleExprLabel);
    try {
        this.state = 837;
        switch(this._input.LA(1)) {
        case ShExDocParser.IRIREF:
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 831;
            this.iri();
             this.$1(localctx); 
            break;
        case ShExDocParser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 2);
            this.state = 834;
            this.blankNode();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.INTEGER = function() {
    return this.getToken(ShExDocParser.INTEGER, 0);
};

NumericLiteralContext.prototype.DECIMAL = function() {
    return this.getToken(ShExDocParser.DECIMAL, 0);
};

NumericLiteralContext.prototype.DOUBLE = function() {
    return this.getToken(ShExDocParser.DOUBLE, 0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitNumericLiteral(this);
	}
};




ShExDocParser.NumericLiteralContext = NumericLiteralContext;

ShExDocParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ShExDocParser.RULE_numericLiteral);
    try {
        this.state = 845;
        switch(this._input.LA(1)) {
        case ShExDocParser.INTEGER:
            this.enterOuterAlt(localctx, 1);
            this.state = 839;
            this.match(ShExDocParser.INTEGER);
             localctx.$$ = this.createLiteral(localctx.children[0].getText(), this.XSD_INTEGER); 
            break;
        case ShExDocParser.DECIMAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 841;
            this.match(ShExDocParser.DECIMAL);
             localctx.$$ = this.createLiteral(localctx.children[0].getText(), this.XSD_DECIMAL); 
            break;
        case ShExDocParser.DOUBLE:
            this.enterOuterAlt(localctx, 3);
            this.state = 843;
            this.match(ShExDocParser.DOUBLE);
             localctx.$$ = this.createLiteral(localctx.children[0].getText(), this.XSD_DOUBLE); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RdfLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_rdfLiteral;
    return this;
}

RdfLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RdfLiteralContext.prototype.constructor = RdfLiteralContext;

RdfLiteralContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

RdfLiteralContext.prototype.LANGTAG = function() {
    return this.getToken(ShExDocParser.LANGTAG, 0);
};

RdfLiteralContext.prototype.datatype = function() {
    return this.getTypedRuleContext(DatatypeContext,0);
};

RdfLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterRdfLiteral(this);
	}
};

RdfLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitRdfLiteral(this);
	}
};




ShExDocParser.RdfLiteralContext = RdfLiteralContext;

ShExDocParser.prototype.rdfLiteral = function() {

    var localctx = new RdfLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ShExDocParser.RULE_rdfLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 847;
        this.string();
        this.state = 851;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
        if(la_===1) {
            this.state = 848;
            this.match(ShExDocParser.LANGTAG);

        } else if(la_===2) {
            this.state = 849;
            this.match(ShExDocParser.T__20);
            this.state = 850;
            this.datatype();

        }

                    let s = localctx.children[1 - 1].$$
                    localctx.$$ = localctx.LANGTAG()
                        ? this.extend(s, { language: this.lowercase(localctx.LANGTAG().getText().substr(1)) })
                        : localctx.datatype()
                        ? this.extend(s, { type: localctx.datatype().$$ })
                        : s
                
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.KW_TRUE = function() {
    return this.getToken(ShExDocParser.KW_TRUE, 0);
};

BooleanLiteralContext.prototype.KW_FALSE = function() {
    return this.getToken(ShExDocParser.KW_FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitBooleanLiteral(this);
	}
};




ShExDocParser.BooleanLiteralContext = BooleanLiteralContext;

ShExDocParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ShExDocParser.RULE_booleanLiteral);
    try {
        this.state = 859;
        switch(this._input.LA(1)) {
        case ShExDocParser.KW_TRUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 855;
            this.match(ShExDocParser.KW_TRUE);
             localctx.$$ = { value: "true", type: this.XSD_BOOLEAN }; 
            break;
        case ShExDocParser.KW_FALSE:
            this.enterOuterAlt(localctx, 2);
            this.state = 857;
            this.match(ShExDocParser.KW_FALSE);
             localctx.$$ = { value: "false", type: this.XSD_BOOLEAN }; 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING_LITERAL_LONG1 = function() {
    return this.getToken(ShExDocParser.STRING_LITERAL_LONG1, 0);
};

StringContext.prototype.STRING_LITERAL_LONG2 = function() {
    return this.getToken(ShExDocParser.STRING_LITERAL_LONG2, 0);
};

StringContext.prototype.STRING_LITERAL1 = function() {
    return this.getToken(ShExDocParser.STRING_LITERAL1, 0);
};

StringContext.prototype.STRING_LITERAL2 = function() {
    return this.getToken(ShExDocParser.STRING_LITERAL2, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitString(this);
	}
};




ShExDocParser.StringContext = StringContext;

ShExDocParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ShExDocParser.RULE_string);
    try {
        this.state = 869;
        switch(this._input.LA(1)) {
        case ShExDocParser.STRING_LITERAL_LONG1:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.match(ShExDocParser.STRING_LITERAL_LONG1);
             localctx.$$ = this.unescapeString(localctx.children[1 - 1].getText(), 3); 
            break;
        case ShExDocParser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 2);
            this.state = 863;
            this.match(ShExDocParser.STRING_LITERAL_LONG2);
             localctx.$$ = this.unescapeString(localctx.children[1 - 1].getText(), 3); 
            break;
        case ShExDocParser.STRING_LITERAL1:
            this.enterOuterAlt(localctx, 3);
            this.state = 865;
            this.match(ShExDocParser.STRING_LITERAL1);
             localctx.$$ = this.unescapeString(localctx.children[1 - 1].getText(), 1); 
            break;
        case ShExDocParser.STRING_LITERAL2:
            this.enterOuterAlt(localctx, 4);
            this.state = 867;
            this.match(ShExDocParser.STRING_LITERAL2);
             localctx.$$ = this.unescapeString(localctx.children[1 - 1].getText(), 1); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineShapeNotContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_inlineShapeNot;
    return this;
}

InlineShapeNotContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineShapeNotContext.prototype.constructor = InlineShapeNotContext;

InlineShapeNotContext.prototype.inlineShapeAtom = function() {
    return this.getTypedRuleContext(InlineShapeAtomContext,0);
};

InlineShapeNotContext.prototype.KW_NOT = function() {
    return this.getToken(ShExDocParser.KW_NOT, 0);
};

InlineShapeNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterInlineShapeNot(this);
	}
};

InlineShapeNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitInlineShapeNot(this);
	}
};




ShExDocParser.InlineShapeNotContext = InlineShapeNotContext;

ShExDocParser.prototype.inlineShapeNot = function() {

    var localctx = new InlineShapeNotContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ShExDocParser.RULE_inlineShapeNot);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 872;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.KW_NOT) {
            this.state = 871;
            this.match(ShExDocParser.KW_NOT);
        }

        this.state = 874;
        this.inlineShapeAtom();
         localctx.$$ = localctx.KW_NOT() ? { type: "ShapeNot", "shapeExpr": localctx.inlineShapeAtom().$$ } : localctx.inlineShapeAtom().$$; 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OnShapeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_onShapeExpr;
    return this;
}

OnShapeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OnShapeExprContext.prototype.constructor = OnShapeExprContext;

OnShapeExprContext.prototype.KW_ON = function() {
    return this.getToken(ShExDocParser.KW_ON, 0);
};

OnShapeExprContext.prototype.inlineShapeExpression = function() {
    return this.getTypedRuleContext(InlineShapeExpressionContext,0);
};

OnShapeExprContext.prototype.KW_SHAPE = function() {
    return this.getToken(ShExDocParser.KW_SHAPE, 0);
};

OnShapeExprContext.prototype.KW_EXPRESSION = function() {
    return this.getToken(ShExDocParser.KW_EXPRESSION, 0);
};

OnShapeExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterOnShapeExpr(this);
	}
};

OnShapeExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitOnShapeExpr(this);
	}
};




ShExDocParser.OnShapeExprContext = OnShapeExprContext;

ShExDocParser.prototype.onShapeExpr = function() {

    var localctx = new OnShapeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ShExDocParser.RULE_onShapeExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 877;
        this.match(ShExDocParser.KW_ON);
        this.state = 880;
        _la = this._input.LA(1);
        if(_la===ShExDocParser.KW_SHAPE) {
            this.state = 878;
            this.match(ShExDocParser.KW_SHAPE);
            this.state = 879;
            this.match(ShExDocParser.KW_EXPRESSION);
        }

        this.state = 882;
        this.inlineShapeExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_iri;
    return this;
}

IriContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriContext.prototype.constructor = IriContext;

IriContext.prototype.IRIREF = function() {
    return this.getToken(ShExDocParser.IRIREF, 0);
};

IriContext.prototype.prefixedName = function() {
    return this.getTypedRuleContext(PrefixedNameContext,0);
};

IriContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterIri(this);
	}
};

IriContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitIri(this);
	}
};




ShExDocParser.IriContext = IriContext;

ShExDocParser.prototype.iri = function() {

    var localctx = new IriContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ShExDocParser.RULE_iri);
    try {
        this.state = 889;
        switch(this._input.LA(1)) {
        case ShExDocParser.IRIREF:
            this.enterOuterAlt(localctx, 1);
            this.state = 884;
            this.match(ShExDocParser.IRIREF);
             // t: 1dot
                    var unesc = this.unescapeText(localctx.children[0].getText().slice(1,-1), {});
                    localctx.$$ = this._base === null || this.absoluteIRI.test(unesc) ? unesc : this._resolveIRI(unesc)
                  
            break;
        case ShExDocParser.PNAME_NS:
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 886;
            this.prefixedName();
             this.$1(localctx); 
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_prefixedName;
    return this;
}

PrefixedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixedNameContext.prototype.constructor = PrefixedNameContext;

PrefixedNameContext.prototype.PNAME_LN = function() {
    return this.getToken(ShExDocParser.PNAME_LN, 0);
};

PrefixedNameContext.prototype.PNAME_NS = function() {
    return this.getToken(ShExDocParser.PNAME_NS, 0);
};

PrefixedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterPrefixedName(this);
	}
};

PrefixedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitPrefixedName(this);
	}
};




ShExDocParser.PrefixedNameContext = PrefixedNameContext;

ShExDocParser.prototype.prefixedName = function() {

    var localctx = new PrefixedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ShExDocParser.RULE_prefixedName);
    try {
        this.state = 895;
        switch(this._input.LA(1)) {
        case ShExDocParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.match(ShExDocParser.PNAME_LN);
             // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
                    var namePos = localctx.children[0].getText().indexOf(':');
                    localctx.$$ = this.expandPrefix(localctx.children[0].getText().substr(0, namePos)) + this.unescapeText(localctx.children[0].getText().substr(namePos + 1), this.pnameEscapeReplacements);
                  
            break;
        case ShExDocParser.PNAME_NS:
            this.enterOuterAlt(localctx, 2);
            this.state = 893;
            this.match(ShExDocParser.PNAME_NS);
             // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
                    localctx.$$ = this.expandPrefix(localctx.children[0].getText().substr(0, localctx.children[0].getText().length - 1));
                  
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ShExDocParser.RULE_blankNode;
    return this;
}

BlankNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodeContext.prototype.constructor = BlankNodeContext;

BlankNodeContext.prototype.BLANK_NODE_LABEL = function() {
    return this.getToken(ShExDocParser.BLANK_NODE_LABEL, 0);
};

BlankNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.enterBlankNode(this);
	}
};

BlankNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ShExDocListener ) {
        listener.exitBlankNode(this);
	}
};




ShExDocParser.BlankNodeContext = BlankNodeContext;

ShExDocParser.prototype.blankNode = function() {

    var localctx = new BlankNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ShExDocParser.RULE_blankNode);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 897;
        this.match(ShExDocParser.BLANK_NODE_LABEL);
         localctx.$$ = localctx.children[0].getText(); 
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.ShExDocParser = ShExDocParser;
